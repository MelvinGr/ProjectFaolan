// <auto-generated />
using System;
using Faolan.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Faolan.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210228202333_5")]
    partial class _5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("Faolan.Core.Data.Account", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("AuthStatus")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ClientInstance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateCounter")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateState")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastConnection")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<byte>("State")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Faolan.Core.Data.Character", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Class")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastConnection")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<ushort>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MapId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<float>("PositionX")
                        .HasColumnType("REAL");

                    b.Property<float>("PositionY")
                        .HasColumnType("REAL");

                    b.Property<float>("PositionZ")
                        .HasColumnType("REAL");

                    b.Property<byte>("Race")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("RealmId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("RotationX")
                        .HasColumnType("REAL");

                    b.Property<float>("RotationY")
                        .HasColumnType("REAL");

                    b.Property<float>("RotationZ")
                        .HasColumnType("REAL");

                    b.Property<byte>("Sex")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MapId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RealmId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Faolan.Core.Data.CharacterBody", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Arm")
                        .HasColumnType("REAL");

                    b.Property<float>("Arse")
                        .HasColumnType("REAL");

                    b.Property<float>("Bosom")
                        .HasColumnType("REAL");

                    b.Property<uint>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("CheekDepth")
                        .HasColumnType("REAL");

                    b.Property<float>("CheekHeight")
                        .HasColumnType("REAL");

                    b.Property<float>("CheekWidth")
                        .HasColumnType("REAL");

                    b.Property<float>("Chest")
                        .HasColumnType("REAL");

                    b.Property<float>("ChinLength")
                        .HasColumnType("REAL");

                    b.Property<float>("ChinWidth")
                        .HasColumnType("REAL");

                    b.Property<float>("CrookedNose")
                        .HasColumnType("REAL");

                    b.Property<float>("EarAngle")
                        .HasColumnType("REAL");

                    b.Property<float>("Ears")
                        .HasColumnType("REAL");

                    b.Property<float>("EyebrowScale")
                        .HasColumnType("REAL");

                    b.Property<float>("EyesAngle")
                        .HasColumnType("REAL");

                    b.Property<float>("EyesDepth")
                        .HasColumnType("REAL");

                    b.Property<float>("EyesHorizontalPos")
                        .HasColumnType("REAL");

                    b.Property<float>("EyesVerticalPos")
                        .HasColumnType("REAL");

                    b.Property<float>("FaceLength")
                        .HasColumnType("REAL");

                    b.Property<uint>("HeadMesh")
                        .HasColumnType("INTEGER");

                    b.Property<float>("JawWidth")
                        .HasColumnType("REAL");

                    b.Property<float>("Leg")
                        .HasColumnType("REAL");

                    b.Property<float>("MouthVerticalPos")
                        .HasColumnType("REAL");

                    b.Property<float>("MouthWidth")
                        .HasColumnType("REAL");

                    b.Property<float>("NoseAngle")
                        .HasColumnType("REAL");

                    b.Property<float>("NoseCurve")
                        .HasColumnType("REAL");

                    b.Property<float>("NoseLength")
                        .HasColumnType("REAL");

                    b.Property<float>("NoseWidth")
                        .HasColumnType("REAL");

                    b.Property<byte>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SkinColor")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Stomach")
                        .HasColumnType("REAL");

                    b.Property<float>("Thigh")
                        .HasColumnType("REAL");

                    b.Property<byte>("Voice")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("CharacterBodies");
                });

            modelBuilder.Entity("Faolan.Core.Data.CharacterEquipment", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bag")
                        .HasColumnType("TEXT");

                    b.Property<uint?>("BeltId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("BootsId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("ChestId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("CloakId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("FirstPosBagId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("HandsId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("HeadId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("LegsId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("MainHandLeftId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("MainHandRightId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("NeckId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("OffHandLeftId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("OffHandRightId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Quest")
                        .HasColumnType("TEXT");

                    b.Property<string>("Resources")
                        .HasColumnType("TEXT");

                    b.Property<uint?>("RingLeftId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("RingRightId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("ShoulderId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("TokensId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("WristId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BeltId");

                    b.HasIndex("BootsId");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.HasIndex("ChestId");

                    b.HasIndex("CloakId");

                    b.HasIndex("FirstPosBagId");

                    b.HasIndex("HandsId");

                    b.HasIndex("HeadId");

                    b.HasIndex("LegsId");

                    b.HasIndex("MainHandLeftId");

                    b.HasIndex("MainHandRightId");

                    b.HasIndex("NeckId");

                    b.HasIndex("OffHandLeftId");

                    b.HasIndex("OffHandRightId");

                    b.HasIndex("RingLeftId");

                    b.HasIndex("RingRightId");

                    b.HasIndex("ShoulderId");

                    b.HasIndex("TokensId");

                    b.HasIndex("WristId");

                    b.ToTable("CharacterEquipment");
                });

            modelBuilder.Entity("Faolan.Core.Data.Item", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Faolan.Core.Data.Npc", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Extras")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Fraction")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GetExp")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Mana")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MapId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<float>("PositionX")
                        .HasColumnType("REAL");

                    b.Property<float>("PositionY")
                        .HasColumnType("REAL");

                    b.Property<float>("PositionZ")
                        .HasColumnType("REAL");

                    b.Property<float>("RotationX")
                        .HasColumnType("REAL");

                    b.Property<float>("RotationY")
                        .HasColumnType("REAL");

                    b.Property<float>("RotationZ")
                        .HasColumnType("REAL");

                    b.Property<uint>("Stamina")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("Npcs");
                });

            modelBuilder.Entity("Faolan.Core.Data.NpcBody", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BeardMesh")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BodyMesh")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("HairMesh")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("HeadMesh")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("NpcId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NpcId")
                        .IsUnique();

                    b.ToTable("NpcBodies");
                });

            modelBuilder.Entity("Faolan.Core.Data.NpcEquipment", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("BeltId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("BootsId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("ChestId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("CloakId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("FirstPosBagId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("HandsId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("HeadId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("LegsId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("MainHandLeftId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("MainHandRightId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("NeckId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("NpcId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("OffHandLeftId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("OffHandRightId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("RingLeftId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("RingRightId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("ShoulderId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("TokensId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("WristId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BeltId");

                    b.HasIndex("BootsId");

                    b.HasIndex("ChestId");

                    b.HasIndex("CloakId");

                    b.HasIndex("FirstPosBagId");

                    b.HasIndex("HandsId");

                    b.HasIndex("HeadId");

                    b.HasIndex("LegsId");

                    b.HasIndex("MainHandLeftId");

                    b.HasIndex("MainHandRightId");

                    b.HasIndex("NeckId");

                    b.HasIndex("NpcId")
                        .IsUnique();

                    b.HasIndex("OffHandLeftId");

                    b.HasIndex("OffHandRightId");

                    b.HasIndex("RingLeftId");

                    b.HasIndex("RingRightId");

                    b.HasIndex("ShoulderId");

                    b.HasIndex("TokensId");

                    b.HasIndex("WristId");

                    b.ToTable("NpcEquipment");
                });

            modelBuilder.Entity("Faolan.Core.Data.Realm", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Country")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FullStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<byte>("LoadStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<byte>("OnlineStatus")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Realms");
                });

            modelBuilder.Entity("Faolan.Core.Data.Spell", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("CastTime")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("EffectSpell")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ManaCost")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("MaxDamage")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("MinDamage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("Faolan.Core.Data.WorldMap", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<float>("PositionX")
                        .HasColumnType("REAL");

                    b.Property<float>("PositionY")
                        .HasColumnType("REAL");

                    b.Property<float>("PositionZ")
                        .HasColumnType("REAL");

                    b.Property<float>("RotationX")
                        .HasColumnType("REAL");

                    b.Property<float>("RotationY")
                        .HasColumnType("REAL");

                    b.Property<float>("RotationZ")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("WorldMaps");
                });

            modelBuilder.Entity("Faolan.Core.Data.WorldObject", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Data0")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Data1")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Data2")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Data3")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Data4")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Data5")
                        .HasColumnType("INTEGER");

                    b.Property<float>("PositionX")
                        .HasColumnType("REAL");

                    b.Property<float>("PositionY")
                        .HasColumnType("REAL");

                    b.Property<float>("PositionZ")
                        .HasColumnType("REAL");

                    b.Property<float>("RotationX")
                        .HasColumnType("REAL");

                    b.Property<float>("RotationY")
                        .HasColumnType("REAL");

                    b.Property<float>("RotationZ")
                        .HasColumnType("REAL");

                    b.Property<string>("Sdat1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sdat2")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Unk0")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk1")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WorldObjects");
                });

            modelBuilder.Entity("Faolan.Core.Data.Character", b =>
                {
                    b.HasOne("Faolan.Core.Data.Account", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faolan.Core.Data.WorldMap", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faolan.Core.Data.Realm", "Realm")
                        .WithMany()
                        .HasForeignKey("RealmId");

                    b.Navigation("Account");

                    b.Navigation("Map");

                    b.Navigation("Realm");
                });

            modelBuilder.Entity("Faolan.Core.Data.CharacterBody", b =>
                {
                    b.HasOne("Faolan.Core.Data.Character", "Character")
                        .WithOne("Body")
                        .HasForeignKey("Faolan.Core.Data.CharacterBody", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Faolan.Core.Data.CharacterEquipment", b =>
                {
                    b.HasOne("Faolan.Core.Data.Item", "Belt")
                        .WithMany()
                        .HasForeignKey("BeltId");

                    b.HasOne("Faolan.Core.Data.Item", "Boots")
                        .WithMany()
                        .HasForeignKey("BootsId");

                    b.HasOne("Faolan.Core.Data.Character", "Character")
                        .WithOne("Equipment")
                        .HasForeignKey("Faolan.Core.Data.CharacterEquipment", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faolan.Core.Data.Item", "Chest")
                        .WithMany()
                        .HasForeignKey("ChestId");

                    b.HasOne("Faolan.Core.Data.Item", "Cloak")
                        .WithMany()
                        .HasForeignKey("CloakId");

                    b.HasOne("Faolan.Core.Data.Item", "FirstPosBag")
                        .WithMany()
                        .HasForeignKey("FirstPosBagId");

                    b.HasOne("Faolan.Core.Data.Item", "Hands")
                        .WithMany()
                        .HasForeignKey("HandsId");

                    b.HasOne("Faolan.Core.Data.Item", "Head")
                        .WithMany()
                        .HasForeignKey("HeadId");

                    b.HasOne("Faolan.Core.Data.Item", "Legs")
                        .WithMany()
                        .HasForeignKey("LegsId");

                    b.HasOne("Faolan.Core.Data.Item", "MainHandLeft")
                        .WithMany()
                        .HasForeignKey("MainHandLeftId");

                    b.HasOne("Faolan.Core.Data.Item", "MainHandRight")
                        .WithMany()
                        .HasForeignKey("MainHandRightId");

                    b.HasOne("Faolan.Core.Data.Item", "Neck")
                        .WithMany()
                        .HasForeignKey("NeckId");

                    b.HasOne("Faolan.Core.Data.Item", "OffHandLeft")
                        .WithMany()
                        .HasForeignKey("OffHandLeftId");

                    b.HasOne("Faolan.Core.Data.Item", "OffHandRight")
                        .WithMany()
                        .HasForeignKey("OffHandRightId");

                    b.HasOne("Faolan.Core.Data.Item", "RingLeft")
                        .WithMany()
                        .HasForeignKey("RingLeftId");

                    b.HasOne("Faolan.Core.Data.Item", "RingRight")
                        .WithMany()
                        .HasForeignKey("RingRightId");

                    b.HasOne("Faolan.Core.Data.Item", "Shoulder")
                        .WithMany()
                        .HasForeignKey("ShoulderId");

                    b.HasOne("Faolan.Core.Data.Item", "Tokens")
                        .WithMany()
                        .HasForeignKey("TokensId");

                    b.HasOne("Faolan.Core.Data.Item", "Wrist")
                        .WithMany()
                        .HasForeignKey("WristId");

                    b.Navigation("Belt");

                    b.Navigation("Boots");

                    b.Navigation("Character");

                    b.Navigation("Chest");

                    b.Navigation("Cloak");

                    b.Navigation("FirstPosBag");

                    b.Navigation("Hands");

                    b.Navigation("Head");

                    b.Navigation("Legs");

                    b.Navigation("MainHandLeft");

                    b.Navigation("MainHandRight");

                    b.Navigation("Neck");

                    b.Navigation("OffHandLeft");

                    b.Navigation("OffHandRight");

                    b.Navigation("RingLeft");

                    b.Navigation("RingRight");

                    b.Navigation("Shoulder");

                    b.Navigation("Tokens");

                    b.Navigation("Wrist");
                });

            modelBuilder.Entity("Faolan.Core.Data.Npc", b =>
                {
                    b.HasOne("Faolan.Core.Data.WorldMap", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("Faolan.Core.Data.NpcBody", b =>
                {
                    b.HasOne("Faolan.Core.Data.Npc", "Npc")
                        .WithOne("Body")
                        .HasForeignKey("Faolan.Core.Data.NpcBody", "NpcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Npc");
                });

            modelBuilder.Entity("Faolan.Core.Data.NpcEquipment", b =>
                {
                    b.HasOne("Faolan.Core.Data.Item", "Belt")
                        .WithMany()
                        .HasForeignKey("BeltId");

                    b.HasOne("Faolan.Core.Data.Item", "Boots")
                        .WithMany()
                        .HasForeignKey("BootsId");

                    b.HasOne("Faolan.Core.Data.Item", "Chest")
                        .WithMany()
                        .HasForeignKey("ChestId");

                    b.HasOne("Faolan.Core.Data.Item", "Cloak")
                        .WithMany()
                        .HasForeignKey("CloakId");

                    b.HasOne("Faolan.Core.Data.Item", "FirstPosBag")
                        .WithMany()
                        .HasForeignKey("FirstPosBagId");

                    b.HasOne("Faolan.Core.Data.Item", "Hands")
                        .WithMany()
                        .HasForeignKey("HandsId");

                    b.HasOne("Faolan.Core.Data.Item", "Head")
                        .WithMany()
                        .HasForeignKey("HeadId");

                    b.HasOne("Faolan.Core.Data.Item", "Legs")
                        .WithMany()
                        .HasForeignKey("LegsId");

                    b.HasOne("Faolan.Core.Data.Item", "MainHandLeft")
                        .WithMany()
                        .HasForeignKey("MainHandLeftId");

                    b.HasOne("Faolan.Core.Data.Item", "MainHandRight")
                        .WithMany()
                        .HasForeignKey("MainHandRightId");

                    b.HasOne("Faolan.Core.Data.Item", "Neck")
                        .WithMany()
                        .HasForeignKey("NeckId");

                    b.HasOne("Faolan.Core.Data.Npc", "Npc")
                        .WithOne("Equipment")
                        .HasForeignKey("Faolan.Core.Data.NpcEquipment", "NpcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faolan.Core.Data.Item", "OffHandLeft")
                        .WithMany()
                        .HasForeignKey("OffHandLeftId");

                    b.HasOne("Faolan.Core.Data.Item", "OffHandRight")
                        .WithMany()
                        .HasForeignKey("OffHandRightId");

                    b.HasOne("Faolan.Core.Data.Item", "RingLeft")
                        .WithMany()
                        .HasForeignKey("RingLeftId");

                    b.HasOne("Faolan.Core.Data.Item", "RingRight")
                        .WithMany()
                        .HasForeignKey("RingRightId");

                    b.HasOne("Faolan.Core.Data.Item", "Shoulder")
                        .WithMany()
                        .HasForeignKey("ShoulderId");

                    b.HasOne("Faolan.Core.Data.Item", "Tokens")
                        .WithMany()
                        .HasForeignKey("TokensId");

                    b.HasOne("Faolan.Core.Data.Item", "Wrist")
                        .WithMany()
                        .HasForeignKey("WristId");

                    b.Navigation("Belt");

                    b.Navigation("Boots");

                    b.Navigation("Chest");

                    b.Navigation("Cloak");

                    b.Navigation("FirstPosBag");

                    b.Navigation("Hands");

                    b.Navigation("Head");

                    b.Navigation("Legs");

                    b.Navigation("MainHandLeft");

                    b.Navigation("MainHandRight");

                    b.Navigation("Neck");

                    b.Navigation("Npc");

                    b.Navigation("OffHandLeft");

                    b.Navigation("OffHandRight");

                    b.Navigation("RingLeft");

                    b.Navigation("RingRight");

                    b.Navigation("Shoulder");

                    b.Navigation("Tokens");

                    b.Navigation("Wrist");
                });

            modelBuilder.Entity("Faolan.Core.Data.Account", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Faolan.Core.Data.Character", b =>
                {
                    b.Navigation("Body");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("Faolan.Core.Data.Npc", b =>
                {
                    b.Navigation("Body");

                    b.Navigation("Equipment");
                });
#pragma warning restore 612, 618
        }
    }
}
