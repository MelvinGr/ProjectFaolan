/*
Project Faolan a Simple and Free Server Emulator for Age of Conan.
Copyright (C) 2009, 2010, 2011, 2012 The Project Faolan Team

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

#include "WorldServer.h"

void WorldServer::GameAgentHandler(Packet* packet, GlobalTable* GTable, vector<GameClient*>* clientList)
{
	GameClient* client = GTable->client;
	Log.Warning("Receive Packet With Opcode: 0x%08X (%s):\n", packet->opcode, packet->receiver.c_str());
	switch(packet->opcode)
	{
	case GI_PassBlob:
		{
			PassBlob::PassBlobHandler(packet, GTable);//client);
			break;
			// In the client this is a: BinaryStream &b;
			//Log.Warning("%s\n\n", String::arrayToHexString(packet->data->buffer, packet->data->bufferLength).c_str());
			uint32 length = packet->data->read<uint32>();
			uint32 passblobOpcode = packet->data->read<uint32>();

			switch(passblobOpcode)
			{
			
			case 0x5a32f0d7:
				{
					/*
					Opcode:  00 00 00 00
					00 00 00 5f 
					PASSBLOB:OPCODE:5a 32 f0 d7 
					00 00 c3 50 
					01 0a 7f e6 
					01 
					43 a8 27 8d 
					43 14 5f 5d 
					44 25 3d f4 
					00 00 00 00
					bf 7f ea 5e 
					00 00 00 00 
					3c d2 72 ce 
					62 
					00 00 c7 a0 
					00 00 0f aa 
					00 00 00 00 
					01 0a 7f e6 
					00 00 00 00 
					00 00 00 00
					00 00 00 00 
					00 00 00 00 
					00 00 00 00 
					00 01 86 aa 
					00 00 00 01 
					00 00 00 00 
					01 
					3e 4f 4f 3c
 */



				}break;
			
			case 0x6b6fd368:
				{
					uint32 unk0 = packet->data->read<uint32>();
					uint32 nClientInst = packet->data->read<uint32>();
					/* this comes afer the above two (from sniff)
					00 00 00 00 78 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3e 4f 4f 3c
					*/
					break;
				}

			case 0xcffd0519: //Update Arrows state
				{
					uint32 data = packet->data->read<uint32>();
					uint32 ClientInst = packet->data->read<uint32>();
					uint8 unk0 = packet->data->read<uint8>();
					uint32 arrows = packet->data->read<uint32>();
					uint32 end = packet->data->read<uint32>();

					PacketBuffer aBuffer(500);
					aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00);
					aBuffer.write<uint32>(length);
					aBuffer.write<uint32>(passblobOpcode);
					aBuffer.write<uint32>(data);
					aBuffer.write<uint32>(ClientInst);
					aBuffer.write<uint8>(unk0);
					aBuffer.write<uint32>(arrows);
					aBuffer.write<uint32>(end);
					aBuffer.doItAll(client->clientSocket);

					break;

				}

			case 0x06ec1255:
				{
					uint32 unk0 = packet->data->read<uint32>();
					uint32 ClientInst = packet->data->read<uint32>();
					uint32 unk1 = packet->data->read<uint16>();
					switch(unk1)
					{
					case 0x0007:
						{
							uint8 pack0[] = {
								0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x8f, 0xb6, 0x00, 0x44, 0x8f, 0xb6, 0x00, 0x00, 0x00, 0x01, 0x56, 0x41, 0x34, 0x55, 0xc1, 0x9d, 0x89, 0x94, 0x5a, 0x3f, 0xed, 0xe3, 0x2c, 0xa3, 0x64, 0x95, 0x0b, 0x1f, 0x15, 0x94, 0xc1, 0x9d, 0x89, 0x94, 0x5a, 0x3f, 0xed, 0xe3, 0x2c, 0xa3, 0x64, 0x95, 0x0b, 0x1f, 0x15, 0x94, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x37, 0xe6, 0xdf, 0x00, 0x37, 0xe6, 0xdf, 0x00, 0x00, 0x00, 0x01, 0x56, 0x4e, 0x36, 0x38, 0xaf, 0x09, 0x5c, 0x95, 0x20, 0x97, 0xfc, 0xba, 0x63, 0xee, 0x82, 0x64, 0x2c, 0x6d, 0xd7, 0x22, 0xaf, 0x09, 0x5c, 0x95, 0x20, 0x97, 0xfc, 0xba, 0x63, 0xee, 0x82, 0x64, 0x2c, 0x6d, 0xd7, 0x22, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3c, 0x4c, 0xd4, 0x00, 0x3c, 0x4c, 0xd4, 0x00, 0x00, 0x00, 0x01, 0x4c, 0x38, 0x30, 0x52, 0x6e, 0x10, 0x1d, 0xa8, 0x8d, 0x2e, 0x2e, 0xd6, 0x3f, 0x26, 0x5e, 0xb3, 0x0e, 0x99, 0x45, 0xaa, 0x6e, 0x10, 0x1d, 0xa8, 0x8d, 0x2e, 0x2e, 0xd6, 0x3f, 0x26, 0x5e, 0xb3, 0x0e, 0x99, 0x45, 0xaa, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
							};
							PacketBuffer aBuffer(500);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00);
							aBuffer.write<uint32>(0x00000112);
							aBuffer.write<uint32>(0x06ec1255);
							aBuffer.write<uint32>(0x0000c350);
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(pack0, sizeof(pack0));
							aBuffer.doItAll(client->clientSocket);
							break;
						}
					}
					break;
				}

			default:
				{
					Log.Error("Unknown passblobOpcode: 0x%08X:\n", passblobOpcode);
					Log.Error("%s\n\n", String::arrayToHexString(packet->data->buffer, packet->data->bufferLength).c_str());
					break;
				}
			}

			break;
		}

	case Opcodes::GA_Ping: //Ping
		{
			Log.Debug("Receive GA_Ping\n");
			sendPackets::GI_PingPong(packet, client);
			break;
		}

	case 0x02: //ChatVicinity
		{
			Log.Debug("Receive GA_ChatVicinity\n");

			uint32 unk0 = packet->data->read<uint32>();
			uint32 unk1 = packet->data->read<uint32>();
			uint32 unk2 = packet->data->read<uint32>();
			uint32 unk3 = packet->data->read<uint32>();
			string text = packet->data->read<string>();

			Log.Notice("Say: %s\n\n", text.c_str());

			if(text[0] == '.' && strlen(text.c_str()) > 2) // a command
				HandleCommand(GTable, text.substr(1, text.length() - 1), clientList);
			else
			{
				// send text to other clients here
				Network::sendToAgentServer("127.0.0.1", 7004, 0, client->nClientInst, text);
			}

			break;
		}

	case 0x03: //Authenticate2
		{
			Log.Debug("Receive GA_Authentication\n");

			client->nClientInst = packet->data->read<uint32>(); // ID64::InstanceType
			client->charInfo.accountID = packet->data->read<uint32>();
			string cGameClientVersionString = packet->data->read<string>();
			client->charInfo.characterID = client->nClientInst & 0x00ffffff;

			Log.Debug("CHAr ID: 0x%08x\n", client->charInfo.characterID);

			Database.getCharacterInfo(client->charInfo.characterID, &GTable->client->charInfo);
			Log.Debug("LOGIN USER %s\nClientInst: 0x%08x\nMap: %i\n", client->charInfo.name.c_str(), client->nClientInst, client->charInfo.map);

			if(client->charInfo.map == 2147483647)
				client->charInfo.map = 4010;

			//Database.deleteCharacter(client->charInfo.characterID);
			Log.Debug("GameClientVersion = %s\n", cGameClientVersionString.c_str());

			if(true) //cGameClientVersionString == settings.clientVersion)
			{
				CharStat EnterWorld;
				ItemHandler hItem;
				//Sending ReportDimensionId
				sendPackets::GI_ReportDimensionID(client, "1");
				//Sending ReportServerID
				sendPackets::GI_ReportServerID(client, 0x10);
				//Sending AckAuth
				sendPackets::GI_AckAuthentication(client, 1);

				PacketBuffer aBuffer(500);

				if(client->charInfo.level > 0)
				{
					hItem.sendCharItems(GTable->client);
					uint32 size=0;

					//Packet 4 in sniff
					uint8 pack1_0[] =
					{ 
						0x5d, 0x85, 0xbf, 0xc7, 
						0x00, 0x00, 0x9c, 0x50, //always the same
						0x00, 0x03, 0x8c, 0x65, //charid? (instance)
						0x00, 
					};
					uint8 pack1_1[] = 
					{
						0x00, 0x00, 0x00, 0x4e, 
						0x00, 0x00, 0x9c, 0x50, 
						0x00, 0x03, 0x8c, 0x65, //instance?
						0x00, 0x00, 0x00, 0x00, 
						0x00, 0x00, 0x00, 0x04, 
						0x00, 0x00, 0x00, 0x00, 
						0xff, 0xff, 0xff, 0xff, 
						0xff, 0xff, 0xff, 0xff, 
						0x00, 0x00, 0x00, 0x07, 
						0x00, 0x00, 0x00, 0x00, 
						0x3e, 0x4f, 0x4f, 0x3c 
					};
					aBuffer = PacketBuffer(500);
					aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
					size = sizeof(pack1_0) + (7 * 4) + 1 + sizeof(pack1_1);
					aBuffer.write<uint32>(size);
					aBuffer.writeArray(pack1_0, sizeof(pack1_0));
					aBuffer.write<uint32>(client->charInfo.position.x);
					aBuffer.write<uint32>(client->charInfo.position.y);
					aBuffer.write<uint32>(client->charInfo.position.z);
					aBuffer.write<uint8>(0x62);
					aBuffer.write<uint32>(0x0000c79c);
					aBuffer.write<uint32>(client->charInfo.map);
					aBuffer.write<uint32>(0);
					aBuffer.write<uint32>(client->nClientInst);
					aBuffer.writeArray(pack1_1, sizeof(pack1_1));
					aBuffer.doItAll(client->clientSocket);

					if(client->charInfo.map == 4010)
					{
						/*
						uint8 objpack1[] = {
							0x00, 0x00, 0x01, 0x20, 0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x85, 0xc5, 0x00, 
							0x00, 0x03, 0x8c, 0x65, //instance
							0x43, 0xb5, 0x36, 0x04, 0x43, 0x1b, 0x6c, 0xcd, 0x44, 0x33, 0x82, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x3e, 0xf0, 0x5e, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x62, 0x08, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x43, 0xb5, 0x36, 0x04, 0x43, 0x1b, 0x6c, 0xcd, 0x44, 0x33, 0x82, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x3e, 0xf0, 0x5e, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x62, 0x08, 0xe1, 0x00, 0x05, 0x4c, 0x69,0x00, 0x0f, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x4c, 0x6b, 0x00, 0x27, 0x30, 0x30, 0x34, 0x37, 0x30, 0x39, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x77, 0x6f, 0x6d, 0x61, 0x6e, 0x00, 0x4d, 0x3c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x33, 0x34, 0x37, 0x35, 0x37, 0x33, 0x22, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3d, 0x22, 0x35, 0x35, 0x30, 0x30, 0x30, 0x22, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x3d, 0x22, 0x22, 0x20, 0x6b, 0x65, 0x79, 0x3d, 0x22, 0x23, 0x45, 0x3f, 0x61, 0x63, 0x59, 0x76, 0x78, 0x70, 0x28, 0x57, 0x5a, 0x5d, 0x75, 0x21, 0x64, 0x73, 0x40, 0x61, 0x25, 0x22, 0x20, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack1, sizeof(objpack1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack2[] = {
							0x00, 0x00, 0x02, 0xa2, 0xf0, 0x96, 0x25, 0x1e, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x5d, 0x00, 
							0x00, 0x03, 0x8c, 0x65, //instance
							0x43, 0xae, 0x7e, 0x77, 0x43, 0x19, 0x68, 0xf6, 0x44, 0x3a, 0x1d, 0x81, 0xbc, 0x96, 0x46, 0x28, 0xbf, 0x27, 0x14, 0xcb, 0x3d, 0x20, 0x4e, 0x1e, 0xbf, 0x41, 0xa4, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x43, 0xae, 0x7e, 0x77, 0x43, 0x19, 0x68, 0xf6, 0x44, 0x3a, 0x1d, 0x81, 0xbc, 0x96, 0x46, 0x28, 0xbf, 0x27, 0x14, 0xcb, 0x3d, 0x20, 0x4e, 0x1e, 0xbf, 0x41, 0xa4, 0x7b, 0x00, 0x37, 0xe4, 0x52, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0xff, 0xee, 0x7f, 0x7f, 0xff, 0xee, 0x7f, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x43, 0x68, 0x65, 0x73, 0x74, 0x20, 0x5b, 0x4e, 0x37, 0x46, 0x55, 0x5d, 0x00, 0x61, 0x3c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x31, 0x33, 0x37, 0x38, 0x32, 0x22, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3d, 0x22, 0x35, 0x30, 0x32, 0x30, 0x30, 0x22, 0x20, 0x6b, 0x65, 0x79, 0x3d, 0x22, 0x21, 0x2c, 0x31, 0x25, 0x56, 0x5a, 0x63, 0x23, 0x29, 0x2a, 0x63, 0x74, 0x6b, 0x2d, 0x7a, 0x4e, 0x46, 0x4e, 0x78, 0x49, 0x22, 0x20, 0x6b, 0x6e, 0x75, 0x62, 0x6f, 0x74, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x20, 0x3e, 0x3c, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0xd6, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xb3, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x35, 0x15, 0xd2, 0x00, 0x35, 0x15, 0xd2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x43, 0x46, 0x31, 0x38, 0xee, 0x3c, 0x5b, 0x32, 0x3c, 0xb4, 0x6d, 0x11, 0xc5, 0x7b, 0x63, 0xae, 0x65, 0x26, 0x49, 0x07, 0xee, 0x3c, 0x5b, 0x32, 0x3c, 0xb4, 0x6d, 0x11, 0xc5, 0x7b, 0x63, 0xae, 0x65, 0x26, 0x49, 0x07, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x01, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xb4, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x45, 0x4a, 0x37, 0x4c, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x02, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xb5, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x45, 0x4a, 0x37, 0x4c, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack2, sizeof(objpack2));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack3[] = {
							0x00, 0x00, 0x01, 0xc2, 0xf0, 0x96, 0x25, 0x1e, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x5c, 0x00, 
							0x00, 0x03, 0x8c, 0x65, //instance
							0x43, 0x91, 0xfe, 0x56, 0x43, 0x0c, 0x1a, 0x1d, 0x44, 0x2e, 0xd0, 0x21, 0xbd, 0xc2, 0xbc, 0x73, 0x3e, 0xc7, 0xfb, 0x26, 0x3c, 0x89, 0xa6, 0x72, 0x3f, 0x6a, 0x5d, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x43, 0x91, 0xfe, 0x56, 0x43, 0x0c, 0x1a, 0x1d, 0x44, 0x2e, 0xd0, 0x21, 0xbd, 0xc2, 0xbc, 0x73, 0x3e, 0xc7, 0xfb, 0x26, 0x3c, 0x89, 0xa6, 0x72, 0x3f, 0x6a, 0x5d, 0x5b, 0x00, 0x37, 0xe4, 0x52, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0xff, 0xee, 0x7f, 0x7f, 0xff, 0xee, 0x7f, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x43, 0x68, 0x65, 0x73, 0x74, 0x20, 0x5b, 0x4e, 0x37, 0x46, 0x55, 0x5d, 0x00, 0x61, 0x3c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x31, 0x33, 0x37, 0x38, 0x32, 0x22, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3d, 0x22, 0x35, 0x30, 0x32, 0x30, 0x30, 0x22, 0x20, 0x6b, 0x65, 0x79, 0x3d, 0x22, 0x21, 0x2c, 0x31, 0x25, 0x56, 0x5a, 0x63, 0x23, 0x29, 0x2a, 0x63, 0x74, 0x6b, 0x2d, 0x7a, 0x4e, 0x46, 0x4e, 0x78, 0x49, 0x22, 0x20, 0x6b, 0x6e, 0x75, 0x62, 0x6f, 0x74, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x20, 0x3e, 0x3c, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0xd6, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xb2, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x35, 0x15, 0xd2, 0x00, 0x35, 0x15, 0xd2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x43, 0x46, 0x31, 0x38, 0xee, 0x3c, 0x5b, 0x32, 0x3c, 0xb4, 0x6d, 0x11, 0xc5, 0x7b, 0x63, 0xae, 0x65, 0x26, 0x49, 0x07, 0xee, 0x3c, 0x5b, 0x32, 0x3c, 0xb4, 0x6d, 0x11, 0xc5, 0x7b, 0x63, 0xae, 0x65, 0x26, 0x49, 0x07, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack3, sizeof(objpack3));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack4[] = {
							0x00, 0x00, 0x01, 0x06, 0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x85, 0xc7, 0x00, 
							0x00, 0x03, 0x8c, 0x65, //instance
							0x43, 0xa1, 0xc1, 0xaa, 0x43, 0x11, 0x1a, 0xa0, 0x44, 0x25, 0x6b, 0x54, 0x3f, 0x3e, 0x3e, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x2b, 0x4c, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x43, 0xa1, 0xc1, 0xaa, 0x43, 0x11, 0x1a, 0xa0, 0x44, 0x25, 0x6b, 0x54, 0x3f, 0x3e, 0x3e, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x2b, 0x4c, 0x1b, 0x00, 0x03, 0x4b, 0x48, 0x00, 0x0f, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbd, 0x4d, 0x99, 0xd2, 0xbe, 0x69, 0x12, 0x09, 0xbd, 0x4c, 0x3f, 0x69, 0x3d, 0x4a, 0xe4, 0xfb, 0x3d, 0xa4, 0x38, 0x02, 0x3d, 0x4c, 0x3f, 0x66, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x00, 0x4d, 0x3c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x32, 0x38, 0x30, 0x37, 0x31, 0x33, 0x22, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3d, 0x22, 0x35, 0x35, 0x30, 0x30, 0x30, 0x22, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x3d, 0x22, 0x22, 0x20, 0x6b, 0x65, 0x79, 0x3d, 0x22, 0x69, 0x59, 0x4e, 0x61, 0x40, 0x23, 0x33, 0x65, 0x4e, 0x42, 0x29, 0x62, 0x39, 0x4a, 0x2d, 0x61, 0x6c, 0x4d, 0x7a, 0x4d, 0x22, 0x20, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack4, sizeof(objpack4));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack5[] = {
							0x00, 0x00, 0x01, 0x06, 0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x85, 0xc8, 0x00, 
							0x00, 0x03, 0x8c, 0x65, //instance
							0x43, 0xa2, 0x9b, 0x02, 0x43, 0x11, 0x43, 0xd7, 0x44, 0x25, 0x73, 0x02, 0x3f, 0x78, 0xed, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x3e, 0x6f, 0x0c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x43, 0xa2, 0x9b, 0x02, 0x43, 0x11, 0x43, 0xd7, 0x44, 0x25, 0x73, 0x02, 0x3f, 0x78, 0xed, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x3e, 0x6f, 0x0c, 0x35, 0x00, 0x03, 0x4b, 0x48, 0x00, 0x0f, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbd, 0x4d, 0x99, 0xd2, 0xbe, 0x69, 0x12, 0x09, 0xbd, 0x4c, 0x3f, 0x69, 0x3d, 0x4a, 0xe4, 0xfb, 0x3d, 0xa4, 0x38, 0x02, 0x3d, 0x4c, 0x3f, 0x66, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x00, 0x4d, 0x3c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x32, 0x38, 0x30, 0x37, 0x31, 0x34, 0x22, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3d, 0x22, 0x35, 0x35, 0x30, 0x30, 0x30, 0x22, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x3d, 0x22, 0x22, 0x20, 0x6b, 0x65, 0x79, 0x3d, 0x22, 0x61, 0x71, 0x57, 0x29, 0x59, 0x4c, 0x73, 0x5e, 0x6c, 0x4c, 0x49, 0x65, 0x2c, 0x40, 0x2d, 0x41, 0x48, 0x38, 0x6f, 0x5a, 0x22, 0x20, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack5, sizeof(objpack5));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack6[] = {
							0x00, 0x00, 0x03, 0x12, 0xf0, 0x96, 0x25, 0x1e, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x5b, 0x00, 
							0x00, 0x03, 0x8c, 0x65, //instance
							0x43, 0x69, 0x45, 0xa2, 0x43, 0x14, 0x7e, 0x35, 0x44, 0x0d, 0x88, 0x62, 0xbc, 0x63, 0xc1, 0x05, 0xbe, 0xca, 0xd4, 0x4e, 0x3d, 0x03, 0xdf, 0xf4, 0xbf, 0x6a, 0xe2, 0x43, 0x00, 0x00, 0x00, 0x00, 0x43, 0x69, 0x45, 0xa2, 0x43, 0x14, 0x7e, 0x35, 0x44, 0x0d, 0x88, 0x62, 0xbc, 0x63, 0xc1, 0x05, 0xbe, 0xca, 0xd4, 0x4e, 0x3d, 0x03, 0xdf, 0xf4, 0xbf, 0x6a, 0xe2, 0x43, 0x00, 0x37, 0xe4, 0x52, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0xff, 0xee, 0x7f, 0x7f, 0xff, 0xee, 0x7f, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x43, 0x68, 0x65, 0x73, 0x74, 0x20, 0x5b, 0x4e, 0x37, 0x46, 0x55, 0x5d, 0x00, 0x61, 0x3c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x31, 0x33, 0x37, 0x38, 0x32, 0x22, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3d, 0x22, 0x35, 0x30, 0x32, 0x30, 0x30, 0x22, 0x20, 0x6b, 0x65, 0x79, 0x3d, 0x22, 0x21, 0x2c, 0x31, 0x25, 0x56, 0x5a, 0x63, 0x23, 0x29, 0x2a, 0x63, 0x74, 0x6b, 0x2d, 0x7a, 0x4e, 0x46, 0x4e, 0x78, 0x49, 0x22, 0x20, 0x6b, 0x6e, 0x75, 0x62, 0x6f, 0x74, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x20, 0x3e, 0x3c, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0xd6, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xb5, 0x00, 0x00, 0x00, 0x00, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xae, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x35, 0x15, 0xd2, 0x00, 0x35, 0x15, 0xd2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x43, 0x46, 0x31, 0x38, 0xee, 0x3c, 0x5b, 0x32, 0x3c, 0xb4, 0x6d, 0x11, 0xc5, 0x7b, 0x63, 0xae, 0x65, 0x26, 0x49, 0x07, 0xee, 0x3c, 0x5b, 0x32, 0x3c, 0xb4, 0x6d, 0x11, 0xc5, 0x7b, 0x63, 0xae, 0x65, 0x26, 0x49, 0x07, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x01, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xaf, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x35, 0x15, 0xd2, 0x00, 0x35, 0x15, 0xd2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x43, 0x46, 0x31, 0x38, 0xee, 0x3c, 0x5b, 0x32, 0x3c, 0xb4, 0x6d, 0x11, 0xc5, 0x7b, 0x63, 0xae, 0x65, 0x26, 0x49, 0x07, 0xee, 0x3c, 0x5b, 0x32, 0x3c, 0xb4, 0x6d, 0x11, 0xc5, 0x7b, 0x63, 0xae, 0x65, 0x26, 0x49, 0x07, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x02, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xb0, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x39, 0x05, 0xdc, 0x00, 0x39, 0x05, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x30, 0x4b, 0x58, 0x4b, 0x8c, 0x31, 0x9b, 0x76, 0x36, 0x39, 0x70, 0x08, 0x17, 0x77, 0x65, 0x37, 0xe6, 0x0f, 0x78, 0x9c, 0x8c, 0x31, 0x9b, 0x76, 0x36, 0x39, 0x70, 0x08, 0x17, 0x77, 0x65, 0x37, 0xe6, 0x0f, 0x78, 0x9c, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x03, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xb1, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x45, 0x4a, 0x37, 0x4c, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack6, sizeof(objpack6));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack7[] = {
							0x00, 0x00, 0x01, 0x24, 0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x85, 0xc9, 0x00, 
							0x00, 0x03, 0x8c, 0x65, //instance
							0x44, 0x0f, 0x66, 0x87, 0x43, 0x2f, 0xe8, 0xf6, 0x44, 0x6c, 0xae, 0x35, 0x00, 0x00, 0x00, 0x00, 0x3d, 0xfd, 0x22, 0x85, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x7e, 0x09, 0x78, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x66, 0x87, 0x43, 0x2f, 0xe8, 0xf6, 0x44, 0x6c, 0xae, 0x35, 0x00, 0x00, 0x00, 0x00, 0x3d, 0xfd, 0x22, 0x85, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x7e, 0x09, 0x78, 0x00, 0x30, 0xec, 0xca, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x91, 0x0f, 0x6d, 0xb8, 0x0d, 0x70, 0xa4, 0xbf, 0x90, 0x9b, 0xf0, 0x3f, 0x91, 0x0f, 0x45, 0x3f, 0xc6, 0x8e, 0x7b, 0x3f, 0x90, 0xa5, 0x0e, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x41, 0x63, 0x68, 0x65, 0x72, 0x6f, 0x6e, 0x69, 0x61, 0x6e, 0x20, 0x43, 0x68, 0x65, 0x73, 0x74, 0x00, 0x68, 0x3c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x33, 0x31, 0x37, 0x30, 0x30, 0x35, 0x35, 0x22, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3d, 0x22, 0x35, 0x30, 0x32, 0x30, 0x30, 0x22, 0x20, 0x6b, 0x65, 0x79, 0x3d, 0x22, 0x36, 0x4a, 0x3f, 0x44, 0x60, 0x39, 0x6f, 0x36, 0x53, 0x23, 0x43, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x48, 0x69, 0x46, 0x37, 0x76, 0x51, 0x6f, 0x30, 0x22, 0x20, 0x6b, 0x6e, 0x75, 0x62, 0x6f, 0x74, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x20, 0x3e, 0x3c, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x5f, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack7, sizeof(objpack7));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack8[] = {
							0x00, 0x00, 0x01, 0x08, 0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x85, 0xc6, 0x00, 
							0x00, 0x03, 0x8c, 0x65, //instance
							0x44, 0x02, 0xda, 0x4e, 0x43, 0x22, 0xa0, 0x00, 0x44, 0x3c, 0xab, 0x33, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x68, 0x03, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x3e, 0xd8, 0x61, 0x63, 0x00, 0x00, 0x00, 0x00, 0x44, 0x02, 0xda, 0x4e, 0x43, 0x22, 0xa0, 0x00, 0x44, 0x3c, 0xab, 0x33, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x68, 0x03, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x3e, 0xd8, 0x61, 0x63, 0x00, 0x02, 0x92, 0x74, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xc1, 0x0b, 0xc9, 0xbd, 0x3a, 0xda, 0x3d, 0xbf, 0x20, 0x76, 0xb8, 0x3f, 0xbd, 0xbc, 0x57, 0x40, 0xec, 0x59, 0xd5, 0x3e, 0xe4, 0xfa, 0x47, 0x3f, 0xab, 0x85, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x41, 0x63, 0x68, 0x65, 0x72, 0x6f, 0x6e, 0x69, 0x61, 0x6e, 0x20, 0x47, 0x61, 0x74, 0x65, 0x00, 0x4d, 0x3c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x32, 0x38, 0x30, 0x37, 0x31, 0x31, 0x22, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3d, 0x22, 0x35, 0x35, 0x30, 0x30, 0x30, 0x22, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x3d, 0x22, 0x22, 0x20, 0x6b, 0x65, 0x79, 0x3d, 0x22, 0x70, 0x48, 0x43, 0x30, 0x4e, 0x6c, 0x67, 0x5d, 0x49, 0x5b, 0x6d, 0x46, 0x5e, 0x34, 0x5d, 0x33, 0x69, 0x4b, 0x6e, 0x65, 0x22, 0x20, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack8, sizeof(objpack8));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack9[] = {
							0x00, 0x00, 0x01, 0x21, 0x33, 0xa5, 0x6f, 0xb0, 0x00, 0x00, 0xc7, 0x48, 0x00, 0x00, 0x11, 0xdb, 0x00, 
							0x00, 0x03, 0x8c, 0x65, //instance
							0x44, 0x3a, 0x6d, 0xc3, 0x43, 0x31, 0xcc, 0x08, 0x44, 0x27, 0x5d, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x14, 0xd7, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x50, 0x48, 0x9d, 0x00, 0x00, 0x00, 0x00, 0x44, 0x3a, 0x6d, 0xc3, 0x43, 0x31, 0xcc, 0x08, 0x44, 0x27, 0x5d, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x14, 0xd7, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x50, 0x48, 0x9d, 0x00, 0x02, 0x92, 0x74, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xc1, 0x0b, 0xc9, 0xbd, 0x3a, 0xda, 0x3d, 0xbf, 0x20, 0x76, 0xb8, 0x3f, 0xbd, 0xbc, 0x57, 0x40, 0xec, 0x59, 0xd5, 0x3e, 0xe4, 0xfa, 0x47, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xb3, 0x00, 0x0f, 0x43, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x54, 0x6f, 0x72, 0x74, 0x61, 0x67, 0x65, 0x00, 0x55, 0x3c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x37, 0x37, 0x39, 0x32, 0x33, 0x31, 0x22, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3d, 0x22, 0x35, 0x35, 0x30, 0x30, 0x30, 0x22, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x3d, 0x22, 0x22, 0x20, 0x6b, 0x65, 0x79, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x31, 0x76, 0x33, 0x57, 0x2b, 0x49, 0x64, 0x7a, 0x54, 0x66, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x46, 0x2d, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x32, 0x33, 0x79, 0x22, 0x20, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xc7, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack9, sizeof(objpack9));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack10[] = {
							0x00, 0x00, 0x02, 0xa2, 0xf0, 0x96, 0x25, 0x1e, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x5e, 0x00, 
							0x00, 0x03, 0x8c, 0x65, //instance
							0x44, 0x17, 0x31, 0x84, 0x43, 0x2a, 0x43, 0xe4, 0x44, 0x59, 0x3e, 0x00, 0x3b, 0xea, 0x9e, 0x6f, 0x3f, 0x6c, 0x13, 0xfd, 0xbd, 0x42, 0xe6, 0x64, 0xbe, 0xc4, 0x7b, 0x89, 0x00, 0x00, 0x00, 0x00, 0x44, 0x17, 0x31, 0x84, 0x43, 0x2a, 0x43, 0xe4, 0x44, 0x59, 0x3e, 0x00, 0x3b, 0xea, 0x9e, 0x6f, 0x3f, 0x6c, 0x13, 0xfd, 0xbd, 0x42, 0xe6, 0x64, 0xbe, 0xc4, 0x7b, 0x89, 0x00, 0x37, 0xe4, 0x52, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0xff, 0xee, 0x7f, 0x7f, 0xff, 0xee, 0x7f, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x43, 0x68, 0x65, 0x73, 0x74, 0x20, 0x5b, 0x4e, 0x37, 0x46, 0x55, 0x5d, 0x00, 0x61, 0x3c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x31, 0x33, 0x37, 0x38, 0x32, 0x22, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3d, 0x22, 0x35, 0x30, 0x32, 0x30, 0x30, 0x22, 0x20, 0x6b, 0x65, 0x79, 0x3d, 0x22, 0x21, 0x2c, 0x31, 0x25, 0x56, 0x5a, 0x63, 0x23, 0x29, 0x2a, 0x63, 0x74, 0x6b, 0x2d, 0x7a, 0x4e, 0x46, 0x4e, 0x78, 0x49, 0x22, 0x20, 0x6b, 0x6e, 0x75, 0x62, 0x6f, 0x74, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x20, 0x3e, 0x3c, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0xd6, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xb6, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x35, 0x15, 0xd2, 0x00, 0x35, 0x15, 0xd2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x43, 0x46, 0x31, 0x38, 0xee, 0x3c, 0x5b, 0x32, 0x3c, 0xb4, 0x6d, 0x11, 0xc5, 0x7b, 0x63, 0xae, 0x65, 0x26, 0x49, 0x07, 0xee, 0x3c, 0x5b, 0x32, 0x3c, 0xb4, 0x6d, 0x11, 0xc5, 0x7b, 0x63, 0xae, 0x65, 0x26, 0x49, 0x07, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x01, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xb7, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x45, 0x4a, 0x37, 0x4c, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x02, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xb8, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x45, 0x4a, 0x37, 0x4c, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack10, sizeof(objpack10));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack11[] = {
							0x00, 0x00, 0x02, 0xa2, 0xf0, 0x96, 0x25, 0x1e, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x5f, 0x00, 
							0x00, 0x03, 0x8c, 0x65, //instance
							0x44, 0x14, 0x86, 0x77, 0x43, 0x2f, 0x77, 0x0a, 0x44, 0x6c, 0xcc, 0x8b, 0xbc, 0xc2, 0x0f, 0x6f, 0xbc, 0xd0, 0xe7, 0x79, 0x3c, 0x35, 0xd4, 0x63, 0xbf, 0x7f, 0xd4, 0x39, 0x00, 0x00, 0x00, 0x00, 0x44, 0x14, 0x86, 0x77, 0x43, 0x2f, 0x77, 0x0a, 0x44, 0x6c, 0xcc, 0x8b, 0xbc, 0xc2, 0x0f, 0x6f, 0xbc, 0xd0, 0xe7, 0x79, 0x3c, 0x35, 0xd4, 0x63, 0xbf, 0x7f, 0xd4, 0x39, 0x00, 0x37, 0xe4, 0x52, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0xff, 0xee, 0x7f, 0x7f, 0xff, 0xee, 0x7f, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x43, 0x68, 0x65, 0x73, 0x74, 0x20, 0x5b, 0x4e, 0x37, 0x46, 0x55, 0x5d, 0x00, 0x61, 0x3c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x31, 0x33, 0x37, 0x38, 0x32, 0x22, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3d, 0x22, 0x35, 0x30, 0x32, 0x30, 0x30, 0x22, 0x20, 0x6b, 0x65, 0x79, 0x3d, 0x22, 0x21, 0x2c, 0x31, 0x25, 0x56, 0x5a, 0x63, 0x23, 0x29, 0x2a, 0x63, 0x74, 0x6b, 0x2d, 0x7a, 0x4e, 0x46, 0x4e, 0x78, 0x49, 0x22, 0x20, 0x6b, 0x6e, 0x75, 0x62, 0x6f, 0x74, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x20, 0x3e, 0x3c, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0xd6, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xb9, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x35, 0x15, 0xd2, 0x00, 0x35, 0x15, 0xd2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x43, 0x46, 0x31, 0x38, 0xee, 0x3c, 0x5b, 0x32, 0x3c, 0xb4, 0x6d, 0x11, 0xc5, 0x7b, 0x63, 0xae, 0x65, 0x26, 0x49, 0x07, 0xee, 0x3c, 0x5b, 0x32, 0x3c, 0xb4, 0x6d, 0x11, 0xc5, 0x7b, 0x63, 0xae, 0x65, 0x26, 0x49, 0x07, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x01, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xba, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x45, 0x4a, 0x37, 0x4c, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x02, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xbb, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x45, 0x4a, 0x37, 0x4c, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack11, sizeof(objpack11));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack12[] = {
							0x00, 0x00, 0x02, 0xa2, 0xf0, 0x96, 0x25, 0x1e, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x60, 0x00, 
							0x00, 0x03, 0x8c, 0x65, //instance
							0x44, 0x2c, 0x9e, 0xd9, 0x43, 0x33, 0xf7, 0xcf, 0x44, 0x1f, 0x7e, 0x14, 0xbc, 0xc6, 0x41, 0x2d, 0x3e, 0x89, 0xe8, 0xc4, 0x3c, 0xc1, 0x4e, 0x7f, 0x3f, 0x76, 0x62, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x44, 0x2c, 0x9e, 0xd9, 0x43, 0x33, 0xf7, 0xcf, 0x44, 0x1f, 0x7e, 0x14, 0xbc, 0xc6, 0x41, 0x2d, 0x3e, 0x89, 0xe8, 0xc4, 0x3c, 0xc1, 0x4e, 0x7f, 0x3f, 0x76, 0x62, 0xfe, 0x00, 0x37, 0xe4, 0x52, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0xff, 0xee, 0x7f, 0x7f, 0xff, 0xee, 0x7f, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0xff, 0x7f, 0xff, 0xee, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x43, 0x68, 0x65, 0x73, 0x74, 0x20, 0x5b, 0x4e, 0x37, 0x46, 0x55, 0x5d, 0x00, 0x61, 0x3c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x31, 0x33, 0x37, 0x38, 0x32, 0x22, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3d, 0x22, 0x35, 0x30, 0x32, 0x30, 0x30, 0x22, 0x20, 0x6b, 0x65, 0x79, 0x3d, 0x22, 0x21, 0x2c, 0x31, 0x25, 0x56, 0x5a, 0x63, 0x23, 0x29, 0x2a, 0x63, 0x74, 0x6b, 0x2d, 0x7a, 0x4e, 0x46, 0x4e, 0x78, 0x49, 0x22, 0x20, 0x6b, 0x6e, 0x75, 0x62, 0x6f, 0x74, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x20, 0x3e, 0x3c, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0xd6, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xbc, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x35, 0x15, 0xd2, 0x00, 0x35, 0x15, 0xd2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x43, 0x46, 0x31, 0x38, 0xee, 0x3c, 0x5b, 0x32, 0x3c, 0xb4, 0x6d, 0x11, 0xc5, 0x7b, 0x63, 0xae, 0x65, 0x26, 0x49, 0x07, 0xee, 0x3c, 0x5b, 0x32, 0x3c, 0xb4, 0x6d, 0x11, 0xc5, 0x7b, 0x63, 0xae, 0x65, 0x26, 0x49, 0x07, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x01, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xbd, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x45, 0x4a, 0x37, 0x4c, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x02, 0x20, 0xd4, 0x00, 0x0c, 0x66, 0xfb, 0xba, 0xbe, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x39, 0x89, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x45, 0x4a, 0x37, 0x4c, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xe9, 0x8e, 0xad, 0xf9, 0x6e, 0xec, 0x73, 0xcb, 0x35, 0x47, 0x22, 0xbd, 0xf0, 0xdf, 0x66, 0x60, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack12, sizeof(objpack12));
						aBuffer.doItAll(client->clientSocket);
						//*/
					}
					Database.getMaxStats(GTable->client);
					EnterWorld.sendCharSpawn(GTable);

					//Load Spawns
					LoadNearNPCs(GTable);

					//Load other characters
					//LoadNearChars(client, clientList);
						
					//client->charInfo.InitalizeStatupStats(client);

					EnterWorld.sendCharacterStats(client);
						
					uint8 pack19_0[] = { 
						0x01, 0x47, 0x04, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x28, 0x48, 0x4e, 0x1f, 0x17, 0xe1, 0x3f, 0x80, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c };
					aBuffer = PacketBuffer(500);
					aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
					aBuffer.write<uint32>(0x00000025);
					aBuffer.write<uint32>(0x4f57dc08);
					aBuffer.write<uint32>(0x0000c350);
					aBuffer.write<uint32>(client->nClientInst);
					aBuffer.writeArray(pack19_0, sizeof(pack19_0));
					aBuffer.doItAll(client->clientSocket);
					//*/

					uint8 pack20_0[] = { 
						0x01, 
						0x00, 0x00, 0x03, 0xbf, 
						0x00, 0x00, 0x00, 0x32, 
						0x3e, 0x4f, 0x4f, 0x3c 
					};
					aBuffer = PacketBuffer(500);
					aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
					aBuffer.write<uint32>(0x00000019);
					aBuffer.write<uint32>(0xf98e10b3);
					aBuffer.write<uint32>(0x0000c350);
					aBuffer.write<uint32>(client->nClientInst);
					aBuffer.writeArray(pack20_0, sizeof(pack20_0));
					aBuffer.doItAll(client->clientSocket);

					uint8 pack23_0[] = {
						0x00, 
						0x00, 0x00, 0x00, 0x06, 
						0x00, 0x00, 0x00, 0x01, 
						0x00, 0x00, 0x23, 0x28, 
						0x00, 0x00, 0x00, 0x1b, 
						0x00, 0x00, 0x29, 0x68, 
						0x00, 0x00, 0x01, 0xf8, 
						0x00, 0x00, 0x38, 0x40, 
						0x00, 0x00, 0x01, 0xf9, 
						0x00, 0x00, 0x32, 0xc8, 
						0x00, 0x00, 0x01, 0xfa, 
						0x00, 0x00, 0x52, 0x6c, 
						0x00, 0x00, 0x01, 0xfb, 
						0x00, 0x00, 0x4b, 0x64, 
						0x3e, 0x4f, 0x4f, 0x3c
					};

					aBuffer = PacketBuffer(500);
					aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
					aBuffer.write<uint32>(0x00000045);
					aBuffer.write<uint32>(0x96b8dc59);
					aBuffer.write<uint32>(0x0000c350);
					aBuffer.write<uint32>(client->nClientInst);
					aBuffer.writeArray(pack23_0, sizeof(pack23_0));
					aBuffer.doItAll(client->clientSocket);

					if(client->charInfo.map == 4010)
					{
						/*
						uint8 objpack1_1[] = {
							0x00, 0x00, 0x00, 0x19, 0xe7, 0xf4, 0xf8, 0xf8, 
							0x00, 0x00, 0xc7, 0x48, 0x00, 0x00, 0x11, 0xdb, 
							0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0xb3, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack1_1, sizeof(objpack1_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack2_1[] = {
							0x00, 0x00, 0x00, 0x24, 0xe7, 0xf4, 0xf8, 0xf8, 
							0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x85, 0xc6, 
							0x00, 0x00, 0x00, 0x00, 0x00, 
							0x00, 0x0d, 
							0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 
							0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack2_1, sizeof(objpack2_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack3_1[] = {
							0x00, 0x00, 0x00, 0x19, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x85, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0xb3, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack3_1, sizeof(objpack3_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack4_1[] = {
							0x00, 0x00, 0x00, 0x19, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x85, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack4_1, sizeof(objpack4_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack5_1[] = {
							0x00, 0x00, 0x00, 0x19, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x85, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack5_1, sizeof(objpack5_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack6_1[] = {
							0x00, 0x00, 0x00, 0x24, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack6_1, sizeof(objpack6_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack7_1[] = {
							0x00, 0x00, 0x00, 0x19, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x31, 0x6b, 0x6a, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack7_1, sizeof(objpack7_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack8_1[] = {
							0x00, 0x00, 0x00, 0x24, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack8_1, sizeof(objpack8_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack9_1[] = {
							0x00, 0x00, 0x00, 0x19, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x37, 0xe3, 0xd6, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack9_1, sizeof(objpack9_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack10_1[] = {
							0x00, 0x00, 0x00, 0x24, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack10_1, sizeof(objpack10_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpack11_1[] = {
							0x00, 0x00, 0x00, 0x19, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x37, 0xe3, 0xd6, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpack11_1, sizeof(objpack11_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpak12_1[] = {
							0x00, 0x00, 0x00, 0x24, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpak12_1, sizeof(objpak12_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpak13_1[] = {
							0x00, 0x00, 0x00, 0x19, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x37, 0xe3, 0xd6, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpak13_1, sizeof(objpak13_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpak14_1[] = {
							0x00, 0x00, 0x00, 0x24, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpak14_1, sizeof(objpak14_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpak15_1[] = {
							0x00, 0x00, 0x00, 0x19, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x37, 0xe3, 0xd6, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpak15_1, sizeof(objpak15_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpak16_1[] = {
							0x00, 0x00, 0x00, 0x24, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpak16_1, sizeof(objpak16_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpak17_1[] = {
							0x00, 0x00, 0x00, 0x19, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x37, 0xe3, 0xd6, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpak17_1, sizeof(objpak17_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpak18_1[] = {
							0x00, 0x00, 0x00, 0x24, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpak18_1, sizeof(objpak18_1));
						aBuffer.doItAll(client->clientSocket);

						uint8 objpak19_1[] = {
							0x00, 0x00, 0x00, 0x19, 0xe7, 0xf4, 0xf8, 0xf8, 0x00, 0x00, 0xc8, 0x7a, 0x00, 0x00, 0x34, 0x60, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x37, 0xe3, 0xd6, 0x3e, 0x4f, 0x4f, 0x3c
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
						aBuffer.writeArray(objpak19_1, sizeof(objpak19_1));
						aBuffer.doItAll(client->clientSocket);
						//*/
					}
				}
				else
				{
					//CHAR CREATION
					string part1, part2;
					uint32 size;

							aBuffer = PacketBuffer(500);
							aBuffer.writeHeader("GameCharAgent", "GameCharInterface", gameUnknown1, 0, client->nClientInst, 0, 0x4a);
							aBuffer.write<uint8>(1);
							aBuffer.write<uint32>(0);
							aBuffer.write<uint32>(0);
							aBuffer.write<uint32>(0);
							aBuffer.write<uint32>(0);
							aBuffer.doItAll(client->clientSocket);

							uint8 pack1_0[] =
							{ 
								0x5d, 0x85, 0xbf, 0xc7, 
								0x00, 0x00, 0x9c, 0x50, //always the same
								0x00, 0x03, 0x8c, 0x65, // instance
								0x00, 
							};
							uint8 pack1_1[] = 
							{
								0x00, 0x00, 0x00, 0x02, 
								0x00, 0x00, 0x9c, 0x50, 
								0x00, 0x03, 0x8c, 0x65,
								0x00, 0x00, 0x00, 0x00, 
								0x00, 0x00, 0x00, 0x04, 
								0x00, 0x00, 0x00, 0x00, 
								0xff, 0xff, 0xff, 0xff, 
								0xff, 0xff, 0xff, 0xff, 
								0x00, 0x00, 0x00, 0x07, 
								0x00, 0x00, 0x00, 0x80, 
								0x3e, 0x4f, 0x4f, 0x3c
							};
							aBuffer = PacketBuffer(500);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							size = sizeof(pack1_0) + (7 * 4) + 1 + sizeof(pack1_1);
							aBuffer.write<uint32>(size);
							aBuffer.writeArray(pack1_0, sizeof(pack1_0));
							aBuffer.write<uint32>(0x43820000);
							aBuffer.write<uint32>(0);
							aBuffer.write<uint32>(0x43910000);
							aBuffer.write<uint8>(0x62);
							aBuffer.write<uint32>(0x0000c79c);
							aBuffer.write<uint32>(client->charInfo.map);
							aBuffer.write<uint32>(0);
							aBuffer.write<uint32>(0);
							aBuffer.writeArray(pack1_1, sizeof(pack1_1));
							aBuffer.doItAll(client->clientSocket);

							uint8 pack2_0[] = {
								0x66, 0xae, 0xdd, 0x50, 
								0x00, 0x00, 0xc8, 0x78, 
								0x00, 0x00, 0x2a, 0x9f, 
								0x00, 
								0x00, 0x03, 0x8c, 0x65, //instance

								0x43, 0x85, 0x79, 0x17, 
								0x41, 0x1e, 0x43, 0x42, 
								0x43, 0x91, 0x2f, 0x5c, 
								0x00, 0x00, 0x00, 0x00, 
								0x3f, 0x03, 0xd9, 0x88, 
								0x00, 0x00, 0x00, 0x00, 
								0x3f, 0x5b, 0x6f, 0x4c, 
								0x00, 0x00, 0x00, 0x00, 

								0x43, 0x85, 0x79, 0x17, 
								0x41, 0x1e, 0x43, 0x42, 
								0x43, 0x91, 0x2f, 0x5c, 
								0x00, 0x00, 0x00, 0x00, 
								0x3f, 0x03, 0xd9, 0x88, 
								0x00, 0x00, 0x00, 0x00, 
								0x3f, 0x5b, 0x6f, 0x4c, 
								0x00, 0x03, 0x0f, 0x6c, 

								0x00, 0x0f, 0x6a, 0x19, 
								0x00, 0x00, 0x00, 0x00, 
								0x00, 0x00, 0x00, 0x00, 
								0xbf, 0x3f, 0x59, 0x4e, 
								0xbc, 0x99, 0x97, 0x1e, 
								0xbe, 0x69, 0x07, 0x19, 
								0x3f, 0x3f, 0x59, 0x4d, 
								0x40, 0x01, 0x5b, 0x50, 
								0x3e, 0x38, 0xaa, 0x41, 
								0x3f, 0x80, 0x00, 0x00, 
								0x00, 0x00, 0x00, 0x00, 
								0x00, 0x00, 0x00, 0x00, 
								0x00
							};
							uint8 pack2_1[] = {
								0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c

							};
							part1 = "4000_stygian_guard_lookout";
							part2 = "<localized id=\"837652\" category=\"55000\" flags=\"\" key=\"x6&#92;3&#36;UmAa[D&quot;QTO_KX&#92;&#39;\" >";
							size = 2 + part1.length() + 2 + part2.length() + sizeof(pack2_0) + sizeof(pack2_1);
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							if(size != 0x00000128)
							{
								Log.Error("Size not equal:\n-need: 0x00000128\n-real: 0x%08x\n", size);
							}
							aBuffer.write<uint32>(size);
							aBuffer.writeArray(pack2_0, sizeof(pack2_0));
							aBuffer.write<string>(part1);
							aBuffer.write<string>(part2);
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);

							uint8 pack3_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xa0, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x82, 0xfa, 0xc1, 0x40, 0xc0, 0xb9, 0xf5, 0x43, 0x91, 0x6e, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x82, 0xfa, 0xc1, 0x40, 0xc0, 0xb9, 0xf5, 0x43, 0x91, 0x6e, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x08, 0x35, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x3f, 0xfa, 0xc9, 0xbb, 0x84, 0xfe, 0x3d, 0xbf, 0xac, 0xdd, 0xe7, 0x3f, 0x51, 0xd8, 0x46, 0x40, 0x0b, 0x81, 0xd9, 0x40, 0x91, 0xa9, 0x8b, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							part1 = "SimpleDynel [---- ]";
							part2 = "<localized id=\"347646\" category=\"55000\" flags=\"\" key=\"zb7Mhp.Dm@*5YCN,(k#I\" >";
							size = 2 + part1.length() + 2 + part2.length() + sizeof(pack3_0) + sizeof(pack2_1);
							if(size != 0x0000010c)
							{
								Log.Error("Size not equal:\n-need: 0x0000010c\n-real: 0x%08x\n", size);
							}
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x000010c);
							aBuffer.writeArray(pack3_0, sizeof(pack3_0));
							aBuffer.write<string>("SimpleDynel [---- ]");
							aBuffer.write<string>("<localized id=\"347646\" category=\"55000\" flags=\"\" key=\"zb7Mhp.Dm@*5YCN,(k#I\" >");
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);

							uint8 pack4_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xa1, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x82, 0xef, 0x9e, 0x40, 0xc1, 0x52, 0x54, 0x43, 0x94, 0x8a, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x82, 0xef, 0x9e, 0x40, 0xc1, 0x52, 0x54, 0x43, 0x94, 0x8a, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x08, 0x35, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x3f, 0xfa, 0xc9, 0xbb, 0x84, 0xfe, 0x3d, 0xbf, 0xac, 0xdd, 0xe7, 0x3f, 0x51, 0xd8, 0x46, 0x40, 0x0b, 0x81, 0xd9, 0x40, 0x91, 0xa9, 0x8b, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							part1 = "SimpleDynel [---- ]";
							part2 = "<localized id=\"347648\" category=\"55000\" flags=\"\" key=\"ao1VMXdAQg9&#39;,NK2`b*A\" >";
							size = 2 + part1.length() + 2 + part2.length() + sizeof(pack4_0) + sizeof(pack2_1);
							if(size != 0x00000110)
							{
								Log.Error("Size not equal:\n-need: 0x00000110\n-real: 0x%08x\n", size);
							}
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x0000110);
							aBuffer.writeArray(pack4_0, sizeof(pack4_0));
							aBuffer.write<string>("SimpleDynel [---- ]");
							aBuffer.write<string>("<localized id=\"347648\" category=\"55000\" flags=\"\" key=\"ao1VMXdAQg9&#39;,NK2`b*A\" >");
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);

							uint8 pack5_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xa2, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x82, 0x3d, 0x2f, 0x40, 0xd8, 0x71, 0x76, 0x43, 0x94, 0xfa, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x82, 0x3d, 0x2f, 0x40, 0xd8, 0x71, 0x76, 0x43, 0x94, 0xfa, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x08, 0x35, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x3f, 0xfa, 0xc9, 0xbb, 0x84, 0xfe, 0x3d, 0xbf, 0xac, 0xdd, 0xe7, 0x3f, 0x51, 0xd8, 0x46, 0x40, 0x0b, 0x81, 0xd9, 0x40, 0x91, 0xa9, 0x8b, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							part1 = "SimpleDynel [---- ]";
							part2 = "<localized id=\"347650\" category=\"55000\" flags=\"\" key=\"0gd@xOpE_.w8Oa^&#39;[EbX\" >";
							size = 2 + part1.length() + 2 + part2.length() + sizeof(pack5_0) + sizeof(pack2_1);
							if(size != 0x00000110)
							{
								Log.Error("Size not equal2:\n-need: 0x00000110\n-real: 0x%08x\n", size);
							}
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x0000110);
							aBuffer.writeArray(pack5_0, sizeof(pack5_0));
							aBuffer.write<string>("SimpleDynel [---- ]");
							aBuffer.write<string>("<localized id=\"347650\" category=\"55000\" flags=\"\" key=\"0gd@xOpE_.w8Oa^&#39;[EbX\" >");
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);

							uint8 pack6_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xa3, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x82, 0x49, 0xdb, 0x40, 0xd9, 0x2a, 0xed, 0x43, 0x91, 0xc1, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x82, 0x49, 0xdb, 0x40, 0xd9, 0x2a, 0xed, 0x43, 0x91, 0xc1, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x08, 0x35, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x3f, 0xfa, 0xc9, 0xbb, 0x84, 0xfe, 0x3d, 0xbf, 0xac, 0xdd, 0xe7, 0x3f, 0x51, 0xd8, 0x46, 0x40, 0x0b, 0x81, 0xd9, 0x40, 0x91, 0xa9, 0x8b, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							part1 = "SimpleDynel [---- ]";
							part2 = "<localized id=\"347652\" category=\"55000\" flags=\"\" key=\"cDM/L&amp;*%5aSnVNJwB&quot;bJ\" >";
							size = 2 + part1.length() + 2 + part2.length() + sizeof(pack6_0) + sizeof(pack2_1);
							if(size != 0x00000115)
							{
								Log.Error("Size not equal2:\n-need: 0x00000110\n-real: 0x%08x\n", size);
							}
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x0000115);
							aBuffer.writeArray(pack6_0, sizeof(pack6_0));
							aBuffer.write<string>("SimpleDynel [---- ]");
							aBuffer.write<string>("<localized id=\"347652\" category=\"55000\" flags=\"\" key=\"cDM/L&amp;*%5aSnVNJwB&quot;bJ\" >");
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);

							uint8 pack7_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xa4, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x82, 0x4b, 0x44, 0x40, 0xdb, 0x6f, 0xbd, 0x43, 0x92, 0x8e, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x82, 0x4b, 0x44, 0x40, 0xdb, 0x6f, 0xbd, 0x43, 0x92, 0x8e, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x03, 0xbc, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x40, 0xa4, 0x60, 0xbc, 0x91, 0x60, 0x37, 0xbf, 0xac, 0xde, 0xaa, 0x3f, 0x51, 0xd8, 0xe7, 0x40, 0x0b, 0x78, 0x7e, 0x40, 0x91, 0x92, 0xc9, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							part1 = "left_rower";
							part2 = "<localized id=\"347667\" category=\"55000\" flags=\"\" key=\"_DZx&amp;gMHc&#36;T(^8@k*2O3\" >";
							size = 2 + part1.length() + 2 + part2.length() + sizeof(pack7_0) + sizeof(pack2_1);
							if(size != 0x0000010b)
							{
								Log.Error("Size not equal2:\n-need: 0x0000010b\n-real: 0x%08x\n", size);
							}
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x000010b);
							aBuffer.writeArray(pack7_0, sizeof(pack7_0));
							aBuffer.write<string>(part1);
							aBuffer.write<string>(part2);
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);

							uint8 pack8_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xa5, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x82, 0xff, 0x3b, 0x40, 0xc3, 0xdb, 0xcb, 0x43, 0x90, 0x93, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x82, 0xff, 0x3b, 0x40, 0xc3, 0xdb, 0xcb, 0x43, 0x90, 0x93, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x03, 0xbc, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x40, 0xa4, 0x60, 0xbc, 0x91, 0x60, 0x37, 0xbf, 0xac, 0xde, 0xaa, 0x3f, 0x51, 0xd8, 0xe7, 0x40, 0x0b, 0x78, 0x7e, 0x40, 0x91, 0x92, 0xc9, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							part1 = "left_rower";
							part2 = "<localized id=\"347670\" category=\"55000\" flags=\"\" key=\"F_R*&quot;j-+t!Fgb]#Y68K2\" >";
							size = 2 + part1.length() + 2 + part2.length() + sizeof(pack8_0) + sizeof(pack2_1);
							if(size != 0x00000108)
							{
								Log.Error("Size not equal:\n-need: 0x00000108\n-real: 0x%08x\n", size);
							}
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x0000108);
							aBuffer.writeArray(pack8_0, sizeof(pack8_0));
							aBuffer.write<string>("left_rower");
							aBuffer.write<string>("<localized id=\"347670\" category=\"55000\" flags=\"\" key=\"F_R*&quot;j-+t!Fgb]#Y68K2\" >");
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);
							
							uint8 pack9_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xa6, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x86, 0x19, 0xba, 0x40, 0xd9, 0xea, 0xc8, 0x43, 0x9d, 0x78, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x86, 0x19, 0xba, 0x40, 0xd9, 0xea, 0xc8, 0x43, 0x9d, 0x78, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x08, 0x34, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x40, 0xa4, 0x60, 0xbc, 0x91, 0x60, 0x37, 0xbf, 0xac, 0xde, 0xaa, 0x3f, 0x51, 0xd8, 0xe7, 0x40, 0x0b, 0x78, 0x7e, 0x40, 0x91, 0x92, 0xc9, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							part1 = "SimpleDynel [---- ]";
							part2 = "<localized id=\"347653\" category=\"55000\" flags=\"\" key=\"]M[8hVNRr6q&#92;IUUAE9VO\" >";
							size = 2 + part1.length() + 2 + part2.length() + sizeof(pack9_0) + sizeof(pack2_1);
							if(size != 0x00000110)
							{
								Log.Error("Size not equal: (after left)\n-need: 0x00000110\n-real: 0x%08x\n", size);
							}
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x0000110);
							aBuffer.writeArray(pack9_0, sizeof(pack9_0));
							aBuffer.write<string>("SimpleDynel [---- ]");
							aBuffer.write<string>("<localized id=\"347653\" category=\"55000\" flags=\"\" key=\"]M[8hVNRr6q&#92;IUUAE9VO\" >");
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);

							uint8 pack10_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xa7, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x85, 0xf6, 0xc9, 0x40, 0xd9, 0xd2, 0xb3, 0x43, 0x98, 0xc8, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x85, 0xf6, 0xc9, 0x40, 0xd9, 0xd2, 0xb3, 0x43, 0x98, 0xc8, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x08, 0x34, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x40, 0xa4, 0x60, 0xbc, 0x91, 0x60, 0x37, 0xbf, 0xac, 0xde, 0xaa, 0x3f, 0x51, 0xd8, 0xe7, 0x40, 0x0b, 0x78, 0x7e, 0x40, 0x91, 0x92, 0xc9, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							part1 = "SimpleDynel [---- ]";
							part2 = "<localized id=\"347654\" category=\"55000\" flags=\"\" key=\"!rH5kzXkNs,IDg#YQ&amp;Bn\" >";
							size = 2 + part1.length() + 2 + part2.length() + sizeof(pack10_0) + sizeof(pack2_1);
							if(size != 0x00000110)
							{
								Log.Error("Size not equal: (after left_rower)\n-need: 0x00000110\n-real: 0x%08x\n", size);
							}
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x0000110);
							aBuffer.writeArray(pack10_0, sizeof(pack10_0));
							aBuffer.write<string>("SimpleDynel [---- ]");
							aBuffer.write<string>("<localized id=\"347654\" category=\"55000\" flags=\"\" key=\"!rH5kzXkNs,IDg#YQ&amp;Bn\" >");
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);

							uint8 pack11_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xa8, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x85, 0xfa, 0xe1, 0x40, 0xd9, 0x30, 0x01, 0x43, 0x9a, 0x57, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x85, 0xfa, 0xe1, 0x40, 0xd9, 0x30, 0x01, 0x43, 0x9a, 0x57, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x08, 0x34, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x40, 0xa4, 0x60, 0xbc, 0x91, 0x60, 0x37, 0xbf, 0xac, 0xde, 0xaa, 0x3f, 0x51, 0xd8, 0xe7, 0x40, 0x0b, 0x78, 0x7e, 0x40, 0x91, 0x92, 0xc9, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							part1 = "SimpleDynel [---- ]";
							part2 = "<localized id=\"347655\" category=\"55000\" flags=\"\" key=\"y1idkekjd%?L&quot;Hnbb&#36;j?\" >";
							size = 2 + part1.length() + 2 + part2.length() + sizeof(pack10_0) + sizeof(pack2_1);
							if(size != 0x00000115)
							{
								Log.Error("Size not equal:\n-need: 0x00000115\n-real: 0x%08x\n", size);
							}
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x0000115);
							aBuffer.writeArray(pack11_0, sizeof(pack11_0));
							aBuffer.write<string>("SimpleDynel [---- ]");
							aBuffer.write<string>("<localized id=\"347655\" category=\"55000\" flags=\"\" key=\"y1idkekjd%?L&quot;Hnbb&#36;j?\" >");
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);

							uint8 pack12_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xa9, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x85, 0x4a, 0x1d, 0x40, 0xc2, 0x78, 0x6c, 0x43, 0x98, 0x74, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x85, 0x4a, 0x1d, 0x40, 0xc2, 0x78, 0x6c, 0x43, 0x98, 0x74, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x08, 0x34, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x40, 0xa4, 0x60, 0xbc, 0x91, 0x60, 0x37, 0xbf, 0xac, 0xde, 0xaa, 0x3f, 0x51, 0xd8, 0xe7, 0x40, 0x0b, 0x78, 0x7e, 0x40, 0x91, 0x92, 0xc9, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							part1 = "SimpleDynel [---- ]";
							part2 = "<localized id=\"347656\" category=\"55000\" flags=\"\" key=\"GwkP_9YudG-o2&#39&#36;$vujJk\" >";
							size = 2 + part1.length() + 2 + part2.length() + sizeof(pack10_0) + sizeof(pack2_1);
							if(size != 0x00000114)
							{
								Log.Error("Size not equal:\n-need: 0x00000114\n-real: 0x%08x\n", size);
							}
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x0000114);
							aBuffer.writeArray(pack12_0, sizeof(pack12_0));
							aBuffer.write<string>("SimpleDynel [---- ]");
							aBuffer.write<string>("<localized id=\"347656\" category=\"55000\" flags=\"\" key=\"GwkP_9YudG-o2&#39&#36;$vujJk\" >");
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);

							//Packet 17
							uint8 pack13_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xaa, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x86, 0x0a, 0x1d, 0x40, 0xd8, 0xcf, 0xc0, 0x43, 0x9b, 0xee, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x86, 0x0a, 0x1d, 0x40, 0xd8, 0xcf, 0xc0, 0x43, 0x9b, 0xee, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x08, 0x34, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x40, 0xa4, 0x60, 0xbc, 0x91, 0x60, 0x37, 0xbf, 0xac, 0xde, 0xaa, 0x3f, 0x51, 0xd8, 0xe7, 0x40, 0x0b, 0x78, 0x7e, 0x40, 0x91, 0x92, 0xc9, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							part1 = "SimpleDynel [---- ]";
							part2 = "<localized id=\"347657\" category=\"55000\" flags=\"\" key=\"C,.ESC4!vWSADB5YhxPh\" >";
							size = 2 + part1.length() + 2 + part2.length() + sizeof(pack10_0) + sizeof(pack2_1);
							if(size != 0x0000010c)
							{
								Log.Error("Size not equal:\n-need: 0x0000010c\n-real: 0x%08x\n", size);
							}
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x000010c);
							aBuffer.writeArray(pack13_0, sizeof(pack13_0));
							aBuffer.write<string>("SimpleDynel [---- ]");
							aBuffer.write<string>("<localized id=\"347657\" category=\"55000\" flags=\"\" key=\"C,.ESC4!vWSADB5YhxPh\" >");
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);

							//Packet 18
							uint8 pack14_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xab, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x82, 0x4a, 0x1d, 0x40, 0xd9, 0x99, 0x9a, 0x43, 0x9a, 0x61, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x82, 0x4a, 0x1d, 0x40, 0xd9, 0x99, 0x9a, 0x43, 0x9a, 0x61, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x08, 0x35, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x3f, 0xfa, 0xc9, 0xbb, 0x84, 0xfe, 0x3d, 0xbf, 0xac, 0xdd, 0xe7, 0x3f, 0x51, 0xd8, 0x46, 0x40, 0x0b, 0x81, 0xd9, 0x40, 0x91, 0xa9, 0x8b, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							part1 = "SimpleDynel [---- ]";
							part2 = "<localized id=\"347659\" category=\"55000\" flags=\"\" key=\"`)Z32)+]W9X!JNi%3IEw\" >";
							size = 2 + part1.length() + 2 + part2.length() + sizeof(pack10_0) + sizeof(pack2_1);
							if(size != 0x0000010c)
							{
								Log.Error("Size not equal2:\n-need: 0x0000010c\n-real: 0x%08x\n", size);
							}
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x000010c);
							aBuffer.writeArray(pack14_0, sizeof(pack14_0));
							aBuffer.write<string>("SimpleDynel [---- ]");
							aBuffer.write<string>("<localized id=\"347659\" category=\"55000\" flags=\"\" key=\"`)Z32)+]W9X!JNi%3IEw\" >");
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);

							//Packet 19
							uint8 pack15_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xac, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x82, 0xf9, 0xdb, 0x40, 0xc0, 0x55, 0xef, 0x43, 0x98, 0x89, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x82, 0xf9, 0xdb, 0x40, 0xc0, 0x55, 0xef, 0x43, 0x98, 0x89, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x08, 0x35, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x3f, 0xfa, 0xc9, 0xbb, 0x84, 0xfe, 0x3d, 0xbf, 0xac, 0xdd, 0xe7, 0x3f, 0x51, 0xd8, 0x46, 0x40, 0x0b, 0x81, 0xd9, 0x40, 0x91, 0xa9, 0x8b, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							part1 = "SimpleDynel [---- ]";
							part2 = "<localized id=\"347660\" category=\"55000\" flags=\"\" key=\"&#39;q&#39;@1EYCHB,N[^HQ9l*S\" >";
							size = 2 + part1.length() + 2 + part2.length() + sizeof(pack10_0) + sizeof(pack2_1);
							if(size != 0x00000114)
							{
								Log.Error("Size not equal2:\n-need: 0x00000114\n-real: 0x%08x\n", size);
							}
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x0000114);
							aBuffer.writeArray(pack15_0, sizeof(pack15_0));
							aBuffer.write<string>("SimpleDynel [---- ]");
							aBuffer.write<string>("<localized id=\"347660\" category=\"55000\" flags=\"\" key=\"&#39;q&#39;@1EYCHB,N[^HQ9l*S\" >");
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);

							//Packet 20
							uint8 pack16_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xad, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x82, 0x3c, 0xac, 0x40, 0xd9, 0xcb, 0xe6, 0x43, 0x98, 0xd4, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x82, 0x3c, 0xac, 0x40, 0xd9, 0xcb, 0xe6, 0x43, 0x98, 0xd4, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x08, 0x35, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x3f, 0xfa, 0xc9, 0xbb, 0x84, 0xfe, 0x3d, 0xbf, 0xac, 0xdd, 0xe7, 0x3f, 0x51, 0xd8, 0x46, 0x40, 0x0b, 0x81, 0xd9, 0x40, 0x91, 0xa9, 0x8b, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x0000110);
							aBuffer.writeArray(pack16_0, sizeof(pack16_0));
							aBuffer.write<string>("SimpleDynel [---- ]");
							aBuffer.write<string>("<localized id=\"347661\" category=\"55000\" flags=\"\" key=\"ms/Kf0Xo5)YdgrT`U]q&amp;\" >");
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);

							//Packet 21
							uint8 pack17_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xae, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x82, 0x46, 0x04, 0x40, 0xd9, 0xfa, 0xec, 0x43, 0x97, 0x3b, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x82, 0x46, 0x04, 0x40, 0xd9, 0xfa, 0xec, 0x43, 0x97, 0x3b, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x08, 0x35, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x3f, 0xfa, 0xc9, 0xbb, 0x84, 0xfe, 0x3d, 0xbf, 0xac, 0xdd, 0xe7, 0x3f, 0x51, 0xd8, 0x46, 0x40, 0x0b, 0x81, 0xd9, 0x40, 0x91, 0xa9, 0x8b, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x000010c);
							aBuffer.writeArray(pack17_0, sizeof(pack17_0));
							aBuffer.write<string>("SimpleDynel [---- ]");
							aBuffer.write<string>("<localized id=\"347662\" category=\"55000\" flags=\"\" key=\"-f[B)RUUl.7?i#yKs]0B\" >");
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);
							
							//Packet 22
							uint8 pack18_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xaf, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x82, 0x46, 0xa8, 0x40, 0xd9, 0x58, 0x25, 0x43, 0x96, 0x77, 0xae, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x82, 0x46, 0xa8, 0x40, 0xd9, 0x58, 0x25, 0x43, 0x96, 0x77, 0xae, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x08, 0x35, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x3f, 0xfa, 0xc9, 0xbb, 0x84, 0xfe, 0x3d, 0xbf, 0xac, 0xdd, 0xe7, 0x3f, 0x51, 0xd8, 0x46, 0x40, 0x0b, 0x81, 0xd9, 0x40, 0x91, 0xa9, 0x8b, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x000010c);
							aBuffer.writeArray(pack18_0, sizeof(pack18_0));
							aBuffer.write<string>("SimpleDynel [---- ]");
							aBuffer.write<string>("<localized id=\"347663\" category=\"55000\" flags=\"\" key=\"yVmNX5-Xs8@z+4+VY?0H\" >");
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);

							//Packet 23
							uint8 pack19_0[] = {
								0x66, 0xae, 0xdd, 0x50, 0x00, 0x00, 0xc8, 0x78, 0x00, 0x00, 0x2a, 0xb0, 0x00, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x82, 0x4a, 0x1d, 0x40, 0xd9, 0x99, 0x9a, 0x43, 0x9a, 0x61, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x82, 0x4a, 0x1d, 0x40, 0xd9, 0x99, 0x9a, 0x43, 0x9a, 0x61, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x02, 0x08, 0x35, 0x00, 0x0f, 0x6a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x3f, 0xfa, 0xc9, 0xbb, 0x84, 0xfe, 0x3d, 0xbf, 0xac, 0xdd, 0xe7, 0x3f, 0x51, 0xd8, 0x46, 0x40, 0x0b, 0x81, 0xd9, 0x40, 0x91, 0xa9, 0x8b, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							part1 = "SimpleDynel [---- ]";
							part2 = "<localized id=\"3072626\" category=\"55000\" flags=\"\" key=\"DX6S56]tylompR+X&#39;Y#-\" >";
							size = 2 + part1.length() + 2 + part2.length() + sizeof(pack19_0) + sizeof(pack2_1);
							if(size != 0x00000111)
							{
								Log.Error("Size not equal: (last simpledynel)\n-need: 0x00000111\n-real: 0x%08x\n", size);
							}
							aBuffer = PacketBuffer(2000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x0000111);
							aBuffer.writeArray(pack19_0, sizeof(pack19_0));
							aBuffer.write<string>("SimpleDynel [---- ]");
							aBuffer.write<string>("<localized id=\"3072626\" category=\"55000\" flags=\"\" key=\"DX6S56]tylompR+X&#39;Y#-\" >");
							aBuffer.writeArray(pack2_1, sizeof(pack2_1));
							aBuffer.doItAll(client->clientSocket);
							//*/
							//Packet 24
							uint8 pack20_0[] = {
								0x00, 0x00, 0x02, 0x14, 0xfa, 0x01, 0x58, 0x07, 0x00, 0x00, 0xc3, 0x50, 0x00, 0x00, 0xe2, 0x1d, 0x00, 0x02, 0xff, 0x00, 0x00, 0x00, 0x2a, 0x50, 0x46, 0x44, 0x53, 0x70, 0x61, 0x43, 0x53, 0x00, 0x00, 0x03, 0xe0, 0x41, 
								0x00, 0x03, 0x8c, 0x65, //Instance
								0x43, 0x83, 0x77, 0x2b, 0x40, 0xc0, 0x73, 0xd9, 0x43, 0x8c, 0x7c, 0x29, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x7c, 0xd9, 0x25, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x20, 0x30, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xca, 0x83, 0x00, 0x03, 0x00, 0x03
							};
							uint8 pack20_1[] = {	
								0x10, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x30, 0xc8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x0a, 0x74, 0x00, 0x00, 0x14, 0x05, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x32, 0x00, 0x02, 0x19, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x27, 0x73, 0x00, 0x00, 0x03, 0xf1, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x9d, 0x74, 0x00, 0x01, 0x9d, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x38, 0x52, 0x38, 0x49, 0x33, 0x57, 0xa3, 0xd9, 0x4d, 0x97, 0x2f, 0xbc, 0x5f, 0x95, 0x49, 0xb7, 0xb7, 0x27, 0x2d, 0x41, 0x33, 0x57, 0xa3, 0xd9, 0x4d, 0x97, 0x2f, 0xbc, 0x5f, 0x95, 0x49, 0xb7, 0xb7, 0x27, 0x2d, 0x41, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x3e, 0x4f, 0x4f, 0x3c
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.writeArray(pack20_0, sizeof(pack20_0));
							aBuffer.write<string>("Stygian Female");
							aBuffer.writeArray(pack20_1, sizeof(pack20_1));
							aBuffer.doItAll(client->clientSocket);
							
							//Packet 25
							uint8 pack21_0[] = {
								0x00, 0x00, 0x02, 0x0c, 0xfa, 0x01, 0x58, 0x07, 
								0x00, 0x00, 0xc3, 0x50, 0x00, 0x00, 0xe2, 0x1e, 
								0x00, 0x02, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x41, 
								0x00, 0x03, 0x8c, 0x65,
								0x43, 0x83, 0xc1, 0xec, 0x40, 0xd1, 0x70, 0xa4, 0x43, 0x8e, 0x4a, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xca, 0x83, 0x00, 0x02, 0x00, 0x03, 
								0x00, 0x06, 
								0x53, 0x61, 0x64, 0x64, 0x75, 0x72, 
								0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x30, 0xc8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x0b, 0xb1, 0x00, 0x00, 0x0f, 0x0a, 0x05, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x32, 0x00, 0x31, 0xf5, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x31, 0xf5, 0xb0, 0x00, 0x00, 0x03, 0xf1, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x03, 0xfc, 0x36, 0x00, 0x03, 0xfc, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x52, 0x46, 0x51, 0x50, 0xf2, 0xf9, 0xa5, 0x57, 0xea, 0x01, 0x34, 0x04, 0x40, 0x32, 0x2f, 0x6a, 0x3d, 0x62, 0x28, 0x44, 0xf2, 0xf9, 0xa5, 0x57, 0xea, 0x01, 0x34, 0x04, 0x40, 0x32, 0x2f, 0x6a, 0x3d, 0x62, 0x28, 0x44, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x3e, 0x4f, 0x4f, 0x3c
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.writeArray(pack21_0, sizeof(pack21_0));
							aBuffer.doItAll(client->clientSocket);
							
							uint8 pack22_0[] = {
								0x00, 0x00, 0x02, 0x5f, 0xfa, 0x01, 0x58, 0x07, 0x00, 0x00, 0xc3, 0x50, 0x00, 0x00, 0xe2, 0x1f, 0x00, 0x02, 0x6c, 0x74, 0x75, 0x6f, 0x72, 0x73, 0x65, 0x6e, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x41, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x85, 0x59, 0x9a, 0x40, 0xbd, 0x91, 0x69, 0x43, 0x92, 0xcc, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0a, 0xca, 0x83, 0x00, 0x02, 0x00, 0x01, 0x00, 0x0d, 0x4d, 0x61, 0x6c, 0x65, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x10, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x30, 0xc8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x0a, 0x77, 0x00, 0x00, 0x14, 0x05, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x32, 0x00, 0x02, 0x24, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0xec, 0x3b, 0x00, 0x00, 0x03, 0xf1, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x3a, 0x11, 0x82, 0x00, 0x3a, 0x11, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x44, 0x37, 0x47, 0x32, 0x50, 0x32, 0xad, 0x52, 0x3b, 0xd3, 0x84, 0x2e, 0x93, 0xf6, 0x9d, 0x49, 0x04, 0xb6, 0xec, 0x77, 0x50, 0x32, 0xad, 0x52, 0x3b, 0xd3, 0x84, 0x2e, 0x93, 0xf6, 0x9d, 0x49, 0x04, 0xb6, 0xec, 0x77, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x12, 0x00, 0x33, 0x4b, 0x15, 0x00, 0x33, 0x4b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x43, 0x55, 0x50, 0x35, 0xdd, 0x60, 0xbf, 0x99, 0x76, 0x09, 0x73, 0xf6, 0x79, 0x49, 0xed, 0xca, 0x8d, 0xed, 0xc7, 0xd2, 0xdd, 0x60, 0xbf, 0x99, 0x76, 0x09, 0x73, 0xf6, 0x79, 0x49, 0xed, 0xca, 0x8d, 0xed, 0xc7, 0xd2, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x3e, 0x4f, 0x4f, 0x3c
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.writeArray(pack22_0, sizeof(pack22_0));
							aBuffer.doItAll(client->clientSocket);
								
							uint8 pack23_0[] = {
								0x00, 0x00, 0x02, 0xad, 0xfa, 0x01, 0x58, 0x07, 0x00, 0x00, 0xc3, 0x50, 0x00, 0x00, 0xe2, 0x20, 0x00, 0x02, 0x6c, 0x74, 0x75, 0x6f, 0x72, 0x73, 0x65, 0x6e, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x41, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x84, 0x29, 0x9a, 0x40, 0xc0, 0x67, 0x24, 0x43, 0x8a, 0x8e, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xca, 0x83, 0x00, 0x03, 0x00, 0x01, 0x00, 0x0f, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x10, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x30, 0xc8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x0a, 0x78, 0x00, 0x00, 0x14, 0x05, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x32, 0x00, 0x00, 0x47, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x22, 0x8a, 0x00, 0x00, 0x03, 0xf1, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0xf1, 0xe2, 0x00, 0x04, 0xf1, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4d, 0x39, 0x57, 0x39, 0x82, 0x53, 0x0e, 0xe7, 0x11, 0xc4, 0x46, 0x3f, 0x25, 0xab, 0x1c, 0xe4, 0xd1, 0xab, 0xa0, 0x6f, 0x82, 0x53, 0x0e, 0xe7, 0x11, 0xc4, 0x46, 0x3f, 0x25, 0xab, 0x1c, 0xe4, 0xd1, 0xab, 0xa0, 0x6f, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x10, 0x00, 0x04, 0xf2, 0x50, 0x00, 0x04, 0xf2, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4f, 0x50, 0x43, 0x31, 0x03, 0x7a, 0xc2, 0xfe, 0x60, 0xe0, 0x46, 0xbf, 0x84, 0x92, 0x3d, 0x28, 0xba, 0xd0, 0xf2, 0x52, 0x03, 0x7a, 0xc2, 0xfe, 0x60, 0xe0, 0x46, 0xbf, 0x84, 0x92, 0x3d, 0x28, 0xba, 0xd0, 0xf2, 0x52, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x12, 0x00, 0x33, 0x4b, 0x15, 0x00, 0x33, 0x4b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x43, 0x55, 0x50, 0x35, 0xdd, 0x60, 0xbf, 0x99, 0x76, 0x09, 0x73, 0xf6, 0x79, 0x49, 0xed, 0xca, 0x8d, 0xed, 0xc7, 0xd2, 0xdd, 0x60, 0xbf, 0x99, 0x76, 0x09, 0x73, 0xf6, 0x79, 0x49, 0xed, 0xca, 0x8d, 0xed, 0xc7, 0xd2, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x3e, 0x4f, 0x4f, 0x3c
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.writeArray(pack23_0, sizeof(pack23_0));
							aBuffer.doItAll(client->clientSocket);
							
							uint8 pack24_0[] = {
								0x00, 0x00, 0x03, 0x14, 0xfa, 0x01, 0x58, 0x07, 0x00, 0x00, 0xc3, 0x50, 0x00, 0x00, 0xe2, 0x21, 0x00, 0x02, 0x50, 0x00, 0x00, 0x00, 0x2a, 0xbc, 0x3c, 0x63, 0xa0, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x03, 0xe0, 0x41, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x85, 0x30, 0x16, 0x41, 0x1e, 0x9b, 0xa6, 0x43, 0x9e, 0x9c, 0x57, 0x00, 0x00, 0x00, 0x00, 0x3d, 0xda, 0x15, 0x55, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x7e, 0x8b, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0a, 0xca, 0x83, 0x00, 0x02, 0x00, 0x03, 0x00, 0x0e, 0x53, 0x74, 0x79, 0x67, 0x69, 0x61, 0x6e, 0x20, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x72, 0x10, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x30, 0xc8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x03, 0xcb, 0x00, 0x00, 0x0f, 0x0a, 0x05, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x18, 0x9c, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x32, 0x00, 0x02, 0x24, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0xec, 0x3e, 0x00, 0x00, 0x03, 0xf1, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x04, 0x63, 0x43, 0x00, 0x04, 0x63, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x5a, 0x39, 0x49, 0x4d, 0xcc, 0x1e, 0x2c, 0x06, 0xec, 0xf6, 0x16, 0x1b, 0xe5, 0xec, 0xb5, 0xcb, 0xac, 0x91, 0x2c, 0x59, 0xcc, 0x1e, 0x2c, 0x06, 0xec, 0xf6, 0x16, 0x1b, 0xe5, 0xec, 0xb5, 0xcb, 0xac, 0x91, 0x2c, 0x59, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x02, 0xe8, 0x35, 0x00, 0x02, 0xe8, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4d, 0x52, 0x43, 0x54, 0x4c, 0x29, 0xc2, 0x16, 0x5c, 0xdf, 0x26, 0x2d, 0x63, 0xc4, 0x32, 0x49, 0x2d, 0x76, 0x80, 0x88, 0x4c, 0x29, 0xc2, 0x16, 0x5c, 0xdf, 0x26, 0x2d, 0x63, 0xc4, 0x32, 0x49, 0x2d, 0x76, 0x80, 0x88, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x10, 0x00, 0x04, 0x63, 0x40, 0x00, 0x04, 0x63, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x50, 0x53, 0x59, 0x4e, 0x40, 0xc1, 0x68, 0x40, 0xb8, 0xbf, 0x43, 0x2c, 0x32, 0x12, 0xbf, 0x2e, 0xe3, 0x97, 0xce, 0x5b, 0x40, 0xc1, 0x68, 0x40, 0xb8, 0xbf, 0x43, 0x2c, 0x32, 0x12, 0xbf, 0x2e, 0xe3, 0x97, 0xce, 0x5b, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x12, 0x00, 0x02, 0x18, 0x7b, 0x00, 0x02, 0x18, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x48, 0x46, 0x34, 0x59, 0xa8, 0xd8, 0x05, 0xfa, 0x32, 0x22, 0x56, 0x3c, 0x9d, 0x78, 0x19, 0xf4, 0x58, 0xc4, 0x8c, 0x48, 0xa8, 0xd8, 0x05, 0xfa, 0x32, 0x22, 0x56, 0x3c, 0x9d, 0x78, 0x19, 0xf4, 0x58, 0xc4, 0x8c, 0x48, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x24, 0x3d, 0xdc, 0x93, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x43, 0x3e, 0xce, 0x94, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x3e, 0x4f, 0x4f, 0x3c
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.writeArray(pack24_0, sizeof(pack24_0));
							aBuffer.doItAll(client->clientSocket);
							//*/
							//PACKET 29
							uint8 pack25_0[] = {
								0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 
								0x00, 0x03, 0x8c, 0x65, 
								0x43, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xca, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x11, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x31, 0x37, 0x35, 0x32, 0x37, 0x30, 0x33, 0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xc8, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x2e, 0x78, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x13, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x01, 0x00, 0x01, 0x1f, 0x40, 0x00, 0x00, 0x1f, 0x40, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x3e, 0x4f, 0x4f, 0x3c
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							//Log.Error("Size: 0x%08x\n", (sizeof(pack25_0)+(3*4)));
							aBuffer.write<uint32>(0x000001be);
							aBuffer.write<uint32>(0xfa015807);
							aBuffer.write<uint32>(0x0000c350);
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(pack25_0, sizeof(pack25_0));
							aBuffer.doItAll(client->clientSocket);
							
							uint8 pack26_0[] = {
								0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xf2, 0x00, 0x00, 0x02, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xad, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xbf
							};
							uint8 pack26_1[] = {
								0x00, 0x00, 0x04, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x1f, 0x40, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x1f, 0x40, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x5e, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1f, 0xb9, 0x00, 0x00, 0x01, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x61, 0x00, 0x00, 0x0d, 0xac, 0x00, 0x00, 0x04, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x02, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x1f, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x1f, 0x40, 0x00, 0x00, 0x03, 0x28, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x01, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf9, 0x00, 0x00, 0x13, 0x88, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x03, 0x24, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x5e, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x5f, 0x57, 0xe5, 0x47, 0x6b, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9d, 0xff, 0xff, 0xfe, 0xd4, 0x00, 0x00, 0x03, 0x9b, 0xff, 0xff, 0xfe, 0xd4, 0x00, 0x00, 0x03, 0x98, 0xff, 0xff, 0xfe, 0xd4, 0x00, 0x00, 0x03, 0x9a, 0xff, 0xff, 0xfe, 0xd4, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x9d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x9b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x9a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
							};
							aBuffer = PacketBuffer(10000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x0000034c);
							aBuffer.write<uint32>(0xbe8fa878);
							aBuffer.write<uint32>(0x0000c350);
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(pack26_0, sizeof(pack26_0));
							aBuffer.write<uint32>(0x00038c65);
							aBuffer.writeArray(pack26_1, sizeof(pack26_1));
							aBuffer.doItAll(client->clientSocket);
							
							//PACKET 31
							uint8 pack27_0[] = {
								0x01, 0x47, 0x98, 0x49, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x25, 0xfd, 0x4d, 0x84, 0x74, 0x36, 0x3f, 0x80, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x00000025);
							aBuffer.write<uint32>(0x4f57dc08);
							aBuffer.write<uint32>(0x0000c350);
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(pack27_0, sizeof(pack27_0));
							aBuffer.doItAll(client->clientSocket);
							
							//PACKET 32
							uint8 pack28_0[] = {
								0x00, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x00, 0x02, 0x3e, 0x4f, 0x4f, 0x3c
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x00000019);
							aBuffer.write<uint32>(0xf98e10b3);
							aBuffer.write<uint32>(0x0000c350);
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(pack28_0, sizeof(pack28_0));
							aBuffer.doItAll(client->clientSocket);
							
							//PACKET 34
							uint8 pack30_0[] = {
								0x01, 0x00, 0x00, 0x03, 0xbf, 0x00, 0x00, 0x00, 0x32, 0x3e, 0x4f, 0x4f, 0x3c
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
							aBuffer.write<uint32>(0x00000019);
							aBuffer.write<uint32>(0xf98e10b3);
							aBuffer.write<uint32>(0x0000c350);
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(pack30_0, sizeof(pack30_0));
							aBuffer.doItAll(client->clientSocket);
				}
			}
			else
			{
				PacketBuffer aBuffer(500);
				aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x07); // InfoToUser
				aBuffer.write<string>("Client of Wrong Version!"); // wrong text & wrong alert
				aBuffer.doItAll(client->clientSocket);
			}

			break;
		}

	case 0x05: //UpdateGameServerStats
		{
			Log.Debug("GA_UpdateGameServerStats\n");
			PacketBuffer aBuffer(500);
			aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x09); // GameServerStats
			//aBuffer.write<uint32>(0x428edb6e); // nGSFrameRate
			aBuffer.write<uint32>(0); // nGSFrameRate
			aBuffer.write<uint32>(0x00000000); // uGSFrameCount
			aBuffer.write<uint32>(0x00000000); // nGSCpuUsage							
			aBuffer.doItAll(client->clientSocket);		
			Log.Debug("GI_UpdateGameServerStats\n");
			break;
		}

	default:
		{
			Log.Warning("Unknown Packet With Opcode: 0x%08X (%s to %s):\n", packet->opcode, packet->receiver.c_str(), packet->sender.c_str());
			Log.Warning("%s\n\n", String::arrayToHexString(packet->data->buffer, packet->data->bufferLength).c_str());

			break;
		}

	}
	
}