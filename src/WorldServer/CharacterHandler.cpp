/*
Project Faolan a Simple and Free Server Emulator for Age of Conan.
Copyright (C) 2009, 2010, 2011, 2012 The Project Faolan Team

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

#include "WorldServer.h"

void WorldServer::LoadNearChars(GameClient* client, vector<GameClient*>* clientList)
{
	for(uint32 i = 0; i < clientList->size(); i++)
	{
		if((clientList->at(i)->charInfo.map == client->charInfo.map) && (clientList->at(i)->nClientInst != client->nClientInst) &&
			client->charInfo.position.distance(clientList->at(i)->charInfo.position) < maxDistance &&
			!checkAlreadySpawned(clientList->at(i), client->charInfo.characterID))
		{
			clientList->at(i)->loadedChar->push_back(client->charInfo.characterID);
			uint32 size = 0;
			uint8 pack1_0[] = 
			{ 
				0x00, 0x00, 0x00, 0x00, //0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00,	    //0x00, 0x00, 0x00, 
				0x00, 0x30, 0xc8, 0x01, //0x00, 0x30, 0xc8, 0x01, 
				0x00, 0x00, 0x00, 0x00, //0x00, 0x00, 0x00, 0x00, 
				0x00, //0x00, 
				0x00, 0xa4, 0x28, 0x3e, //0x00, 0xa4, 0x28, 0x3e, 
				0xc3, 0xb9, 0x40, 0x01, //0x95, 0x9e, 0x26, 0x01, 
				0x00, //0x00, 
				0x00, 0x00, 0x00, 0x00, //0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, //0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, //0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x04, 0x79, //0x00, 0x00, 0x04, 0x88, 
				0x00, 0x00, 0x43, 0x30, //0x00, 0x00, 0x2e, 0xe0, 
				0x00, 0x00, 0x00, 0x00, //0x00, 0x00, 0x08, 0x2a, 
				0x00, 0x00, 0x00, 0x00, //0x00, 0x00, 0x40, 0x74, 

				0x00, 0x00, 0x00, 0x00, //0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x01, 0x02, //0x00, 0x00, 0x01, 0x02, 
				0x00, 0x00, 0x00, 0x00, //0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x0a, //0x00, 0x00, 0x00, 0x0a, 
				0x00, //0x00, 
				0x00, 0x01, //1 (not race) //0x00, 0x01, 
				0x00, 0x01, //1 (level)	   //0x00, 0x01, 
				0x2a, 0xf8, //0x1f, 0x40, 
				0x00, 0x00, 0x27, 0x2e, //0x00, 0x00, 0x22, 0x60, 
				0x00, 0x32, //0x00, 0x32, 
				0x00, 0x00 //0x00, 0x00
			};
			//0x00, 0x00, 0x00, 0x5f, //Size of Char
			uint8 pack1_1[] = {
				0x00, 0x00, 0x00, 0x00, //same at new char creation
				0x00, 0x00, 0x00, 0x64, //same at new char creation
				0x00, 0x00, //same at new char creation
				0x00, 0x00, 0x00, 0x00, //same at new char creation
				0x00, 0x00, 0x00, 0x00, //same at new char creation
				0x00, 0x00, 0x00, 0x04, //same at new char creation
				0x00, 0x00, 0x00, 0x02  //same at new char creation
			};
			//0x00, 0x0c, 0x1c, 0x0a, //HeadMesh
			uint8 pack1_2[] = {

				0x00, 0x00, 0x03, 0xf1, //same at new char creation
				0x02, //same at new char creation
				0x00, 0x00, 0x00, 0x02, //2
				0x00, 0x00, 0x00, 0x10, //0x10
				0x00, 0x3a, 0x11, 0x85, 
				0x00, 0x3a, 0x11, 0x85, 
				0x00, 0x00, 0x00, 0x01, 
				0x34, 0x34, 0x32, 0x50, 0x0e, 0xa1, 0x6f, 0x5e, 0xde, 0x3d, 0xaa, 0x40, 0x1e, 0xf8, 0xa1, 0x9a, 0xa9, 0x0c, 0x6a, 0x59, 0x0e, 0xa1, 0x6f, 0x5e, 0xde, 0x3d, 0xaa, 0x40, 0x1e, 0xf8, 0xa1, 0x9a, 0xa9, 0x0c, 0x6a, 0x59, 
				0x00, 0x00, 0x03, 0xf1,
				0x00, 0x00, 0x00, 0x12, 
				0x00, 0x33, 0x4b, 0x15, 
				0x00, 0x33, 0x4b, 0x15, 
				0x00, 0x00, 0x00, 0x01,
				0x43, 0x55, 0x50, 0x35, 0xdd, 0x60, 0xbf, 0x99, 0x76, 0x09, 0x73, 0xf6, 0x79, 0x49, 0xed, 0xca, 0x8d, 0xed, 0xc7, 0xd2, 0xdd, 0x60, 0xbf, 0x99, 0x76, 0x09, 0x73, 0xf6, 0x79, 0x49, 0xed, 0xca, 0x8d, 0xed, 0xc7, 0xd2, 
				0x00, 0x00, 0x03, 0xf1, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x01, //1 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x08, //Following points
				0x00, 0x00, 
				0x00, 0x00, //0xb7 (painting on the arm of the char)
				0x3f, 0x80, 0x00, 0x00, //same at new char creation
				0x00, 0x00, 0x00, 0x01, //point 1
				0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, //0x02, 0x5c, //Beard
				0x3f, 0x80, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x02, //point 2
				0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, //0x00, 0x85, //Hair
				0x3f, 0x80, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x03, //point 3
				0x00, 0x00, 0x00, 0x00, 
				0x01, 0xa0, 0x3f, 0x80,
				0x00, 0x00, 
				0x00, 0x00, 0x00, 0x04, //point 4
				0x00, 0x00, 0x00, 0x00, 
				0x00, 0xdd, 0x3f, 0x80, 
				0x00, 0x00, 
				0x00, 0x00, 0x00, 0x05, //point 5
				0x00, 0x00, 0x00, 0x00, 
				0x01, 0x09, 0x3f, 0x80, //position of beard
				0x00, 0x00, 
				0x00, 0x00, 0x00, 0x06, //point 6
				0x00, 0x00, 0x00, 0x00, 
				0x01, 0xd1, 0x3f, 0x80, 
				0x00, 0x00, 
				0x00, 0x00, 0x00, 0x07, //point 7
				0x00, 0x00, 0x00, 0x00, 
				0x03, 0x3b, 0x3f, 0x80, 
				0x00, 0x00, 
				0x00, 0x00, 0x00, 0x08, //point 8
				0x00, 0x00, 
				0x00, 0x00, 0x4a, 0xe3, 
				0x00, 0x00, 0x01, 0x2c, 
				0x00, 
				0x00, 0x00, 0x07, 0x08, 
				0x00, 
				0x00, 0x00, 0x17, 0x70, 
				0x00, 
				0x00, 0x00, 0x17, 0xd4, 
				0x00, 
				0x00, 0x00, 0x18, 0x38, 
				0x00, 
				0x00, 0x00, 0x18, 0x9c, 
				0x00, 
				0x00, 0x00, 0x19, 0xc8, 
				0x00, 
				0x00, 0x00, 0x1a, 0x90, 
				0x00, 
				0x00, 0x00, 0x1a, 0xf4, 
				0x00, 
				0x00, 0x00, 0x1b, 0xbc, 
				0x00, 
				0x00, 0x00, 0x1f, 0xa4, 
				0x00, 
				0x00, 0x00, 0x20, 0x71, 
				0x00, 
				0x00, 0x00, 0x20, 0xd0, 
				0x00, 
				0x00, 0x00, 0x35, 0x20, 
				0x00, 
				0x00, 0x01, 0xe5, 0xf0, 
				0x00, 
				0x00, 0x04, 0xdb, 0xc0, 
				0x00, 
				0x00, 0x04, 0xdd, 0x50, 
				0x00, 
				0x00, 0x05, 0x03, 0xfc, 
				0x00, 
				0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x6f, 
				0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x03, 0xf1, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c 
				//*/
				//test
				//0x00, 0x00, 0x03, 0xf1, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0xf1, 0xe3, 0x00, 0x04, 0xf1, 0xe3, 0x00, 0x00, 0x00, 0x01, 0x4c, 0x53, 0x47, 0x4f, 0x99, 0x3a, 0x59, 0xbc, 0x02, 0x69, 0x29, 0x13, 0x7a, 0x5f, 0x54, 0xcf, 0x9d, 0x47, 0x3d, 0xa9, 0x99, 0x3a, 0x59, 0xbc, 0x02, 0x69, 0x29, 0x13, 0x7a, 0x5f, 0x54, 0xcf, 0x9d, 0x47, 0x3d, 0xa9, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x10, 0x00, 0x04, 0xf2, 0x4c, 0x00, 0x04, 0xf2, 0x4c, 0x00, 0x00, 0x00, 0x01, 0x30, 0x41, 0x59, 0x4b, 0x95, 0xa3, 0x9b, 0x79, 0xaa, 0xbc, 0xcc, 0x12, 0x4d, 0x3c, 0x16, 0x57, 0xa1, 0x9f, 0xa0, 0x63, 0x95, 0xa3, 0x9b, 0x79, 0xaa, 0xbc, 0xcc, 0x12, 0x4d, 0x3c, 0x16, 0x57, 0xa1, 0x9f, 0xa0, 0x63, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x12, 0x00, 0x33, 0x4b, 0x15, 0x00, 0x33, 0x4b, 0x15, 0x00, 0x00, 0x00, 0x01, 0x43, 0x55, 0x50, 0x35, 0xdd, 0x60, 0xbf, 0x99, 0x76, 0x09, 0x73, 0xf6, 0x79, 0x49, 0xed, 0xca, 0x8d, 0xed, 0xc7, 0xd2, 0xdd, 0x60, 0xbf, 0x99, 0x76, 0x09, 0x73, 0xf6, 0x79, 0x49, 0xed, 0xca, 0x8d, 0xed, 0xc7, 0xd2, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xb7, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb3, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8e, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x12, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0xcf, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x01, 0xde, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x4e, 0xd4, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x0a, 0xf0, 0x00, 0x00, 0x00, 0x17, 0x70, 0x00, 0x00, 0x00, 0x18, 0x38, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x19, 0x64, 0x00, 0x00, 0x00, 0x19, 0xc8, 0x00, 0x00, 0x00, 0x1a, 0x2c, 0x00, 0x00, 0x00, 0x1a, 0x90, 0x00, 0x00, 0x00, 0x1a, 0xf4, 0x00, 0x00, 0x00, 0x1b, 0xbc, 0x00, 0x00, 0x00, 0x1d, 0x4c, 0x00, 0x00, 0x00, 0x1e, 0x78, 0x00, 0x00, 0x00, 0x1f, 0xa4, 0x00, 0x00, 0x00, 0x20, 0x71, 0x00, 0x00, 0x00, 0x20, 0xd0, 0x00, 0x00, 0x00, 0x22, 0xc4, 0x00, 0x00, 0x00, 0x35, 0x20, 0x00, 0x00, 0x03, 0x94, 0x68, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4f, 0x4f, 0x3c
			};

			size = sizeof(pack1_0) + sizeof(pack1_1) + sizeof(pack1_2) + (17 * 4) + 2 + 2 + clientList->at(i)->charInfo.name.size();

			PacketBuffer aBuffer(50000);
			aBuffer.writeHeader("GameAgent", "GameInterface", gameUnknown1, 0, client->nClientInst, 0, 0x00); // PassBlob
			aBuffer.write<uint32>(size);
			aBuffer.write<uint32>(0xfa015807); //opcode for spawning
			aBuffer.write<uint32>(0x0000c350); 
			aBuffer.write<uint32>(clientList->at(i)->nClientInst);
			aBuffer.write<uint32>(0x00010041);
			aBuffer.write<uint32>(0x00038c65); //Maybe Instance
			aBuffer.write<uint32>(0x00008a88);
			aBuffer.write<uint32>(clientList->at(i)->charInfo.position.x);
			aBuffer.write<uint32>(clientList->at(i)->charInfo.position.y);
			aBuffer.write<uint32>(clientList->at(i)->charInfo.position.z);
			aBuffer.write<uint32>(0x00000000);
			aBuffer.write<uint32>(0x3ed8616c);
			aBuffer.write<uint32>(0x00000000);
			aBuffer.write<uint32>(0x3f6803ca);
			aBuffer.write<uint16>(0x0000);

			switch(clientList->at(i)->charInfo.sex)
			{
			case 0x02:
				{
					switch(clientList->at(i)->charInfo.race)
					{
					case 0x01:
						{
							aBuffer.write<uint8>(0x06);
							break;
						}

					case 0x02:
						{
							aBuffer.write<uint8>(0x08);
							break;
						}
					case 0x03:
						{
							aBuffer.write<uint8>(0x0e);
							break;
						}
					}
					break;
				}

			case 0x03:
				{
					switch(clientList->at(i)->charInfo.race)
					{
					case 0x01:
						{
							aBuffer.write<uint8>(0x07);
							break;
						}

					case 0x02:
						{
							aBuffer.write<uint8>(0x0b);
							break;
						}
					case 0x03:
						{
							aBuffer.write<uint8>(0x0f);
							break;
						}
					}
					break;
				}
			}

			aBuffer.write<uint8>(0x01);
			aBuffer.write<string>(clientList->at(i)->charInfo.name);
			aBuffer.write<uint32>(0x00000001);	//same on other sniff
			aBuffer.write<uint8>(0x03);	//on other sniff 0x02
			aBuffer.write<uint8>(clientList->at(i)->charInfo.Class);
			aBuffer.writeArray(pack1_0, sizeof(pack1_0));
			aBuffer.write<uint32>(clientList->at(i)->charInfo.size);	//Size
			aBuffer.writeArray(pack1_1, sizeof(pack1_1));
			aBuffer.write<uint32>(clientList->at(i)->charInfo.headmesh);	//HeadMesh
			aBuffer.writeArray(pack1_2, sizeof(pack1_2));
			aBuffer.doItAll(client->clientSocket);
		}
	}
}

bool WorldServer::checkAlreadySpawned(GameClient* client, uint32 characterId)
{
	for(uint32 l = 0; l < client->loadedChar->size(); l++)
	{
		if(client->loadedChar->at(l) == characterId)
			return true;
	}

	return false;
}