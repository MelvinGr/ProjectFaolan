/*
Project Faolan a Simple and Free Server Emulator for Age of Conan.
Copyright (C) 2009, 2010, 2011, 2012 The Project Faolan Team

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

#include "WorldServer.h"

void WorldServer::GameAgentHandler(Packet* packet, GlobalTable* GTable, vector<GameClient*>* clientList)
{
	GameClient* client = GTable->client;
	Log.Debug("Receive Opcode: 0x%04x\n", packet->opcode);
	Log.Warning("Receive Packet:\n%s\n\n", String::arrayToHexString(packet->packetBuffer->buffer, packet->packetBuffer->bufferLength).c_str());
	switch(packet->opcode)
	{
	case 0x2000:
		{
			if(packet->senderInt->buffer[1] == 0x48)
			{
				Log.Debug("Receive GameCharAgentProject\n");
				uint32 sId1 = packet->data->read<uint32>();
				uint32 sId2 = packet->data->read<uint32>();
				uint32 sId3 = packet->data->read<uint32>();
				uint32 sId4 = packet->data->read<uint32>();

				uint8 sender[] = { 0x0d, 0xfc, 0x56, 0x97, 0x5b, 0x10, 0x14 };
				uint8 receiver[] = { 0x0d, 0x48, 0x76, 0x37, 0x28, 0x10, 0x84, 0x80, 0x80, 0x08 };

				PacketBuffer aBuffer(500);
				aBuffer.writeHeader(sender, sizeof(sender), receiver, sizeof(receiver), 0x2000, true); 
				aBuffer.write<uint32>(sId3);
				aBuffer.write<uint32>(sId4);
				if(sId4 != 0x000027f9)
					aBuffer.write<uint32>(0x00000002);
				else
					aBuffer.write<uint32>(0x00000000);
				aBuffer.doItAll(client->clientSocket);
				Log.Debug("Send GameCharAgentProject\n");
			}
			else
			{
				uint32 pbLength = packet->data->read<uint32>();
				uint32 pbOpcode = packet->data->read<uint32>();
				Log.Debug("Data Opcode:  0x%08x\n", pbOpcode);
				switch(pbOpcode)
				{
				case 0xf98e10b3:
					{
						uint8 sender1[] = { 0x0d, 0x5d, 0xb9, 0xec, 0xa9, 0x10, 0x14 };
						uint8 receiver1[] = { 0x0d, 0x91, 0xf7, 0x87, 0x8b, 0x10, 0x84, 0x80, 0x80, 0x08 };
						uint8 sender2[] = { 0x0d, 0x13, 0xce, 0x71, 0xb1, 0x10, 0x14 };
						uint8 receiver2[] = {0x0d, 0x47, 0xc1, 0x67, 0x6c, 0x10, 0x84, 0x80, 0x80, 0x08 };

						PacketBuffer aBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x201c, true);
						aBuffer.write<uint32>(0x00000068);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint32>(0);
						aBuffer.write<uint32>(0x00000017);
						aBuffer.write<uint32>(0x0001e1da);
						aBuffer.doItAll(client->clientSocket);

						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x201c, true);
						aBuffer.write<uint32>(0x00000068);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint32>(0);
						aBuffer.write<uint32>(0x00000008);
						aBuffer.write<uint32>(0xffffffff);
						aBuffer.doItAll(client->clientSocket);

						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x201c, true);
						aBuffer.write<uint32>(0x00000068);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint32>(0);
						aBuffer.write<uint32>(0x00000017);
						aBuffer.write<uint32>(0x0001e1db);
						aBuffer.doItAll(client->clientSocket);

						uint8 data[] = {
							0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x08, 0x91, 0xc8, 0x80, 0x80, 0xe0, 0xca, 0xe4, 0xea, 0x20, 0x12, 0x07, 0x08, 0x00, 0x10, 0x81, 0x80, 0x80, 0x20, 0x12, 0x08, 0x08, 0x08, 0x10, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x12, 0x06, 0x08, 0x17, 0x10, 0xdb, 0xc3, 0x07, 0x12, 0x04, 0x08, 0x2e, 0x10, 0x07, 0x1a, 0x53, 0x0a, 0x14, 0x0d, 0x79, 0x9b, 0xa3, 0x95, 0x15, 0x12, 0xcc, 0xbc, 0xaa, 0x1d, 0x57, 0x16, 0x3c, 0x4d, 0x25, 0x63, 0xa0, 0x9f, 0xa1, 0x12, 0x14, 0x0d, 0x79, 0x9b, 0xa3, 0x95, 0x15, 0x12, 0xcc, 0xbc, 0xaa, 0x1d, 0x57, 0x16, 0x3c, 0x4d, 0x25, 0x63, 0xa0, 0x9f, 0xa1, 0x1a, 0x14, 0x0d, 0x79, 0x9b, 0xa3, 0x95, 0x15, 0x12, 0xcc, 0xbc, 0xaa, 0x1d, 0x57, 0x16, 0x3c, 0x4d, 0x25, 0x63, 0xa0, 0x9f, 0xa1, 0x25, 0x4c, 0xf2, 0x04, 0x00, 0x2d, 0x4c, 0xf2, 0x04, 0x00, 0x38, 0x01, 0x45, 0x4b, 0x59, 0x41, 0x30, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2020, true);
						aBuffer.write<uint32>(0x00000068);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data, sizeof(data));
						aBuffer.doItAll(client->clientSocket);

						
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x201c, true);
						aBuffer.write<uint32>(0x00000068);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint32>(0);
						aBuffer.write<uint32>(0x00000017);
						aBuffer.write<uint32>(0x0001e1dc);
						aBuffer.doItAll(client->clientSocket);

						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x201c, true);
						aBuffer.write<uint32>(0x00000068);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint32>(0);
						aBuffer.write<uint32>(0x00000008);
						aBuffer.write<uint32>(0xffffffff);
						aBuffer.doItAll(client->clientSocket);

						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x201c, true);
						aBuffer.write<uint32>(0x00000068);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint32>(0);
						aBuffer.write<uint32>(0x00000017);
						aBuffer.write<uint32>(0x0001e1dd);
						aBuffer.doItAll(client->clientSocket);

						uint8 data2[] = {
							0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x80, 0x08, 0x92, 0xc8, 0x80, 0x80, 0xe0, 0xca, 0xe4, 0xea, 0x20, 0x12, 0x07, 0x08, 0x00, 0x10, 0x81, 0x80, 0x80, 0x20, 0x12, 0x08, 0x08, 0x08, 0x10, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x12, 0x06, 0x08, 0x17, 0x10, 0xdd, 0xc3, 0x07, 0x12, 0x04, 0x08, 0x2e, 0x10, 0x07, 0x1a, 0x53, 0x0a, 0x14, 0x0d, 0xbc, 0x59, 0x3a, 0x99, 0x15, 0x13, 0x29, 0x69, 0x02, 0x1d, 0xcf, 0x54, 0x5f, 0x7a, 0x25, 0xa9, 0x3d, 0x47, 0x9d, 0x12, 0x14, 0x0d, 0xbc, 0x59, 0x3a, 0x99, 0x15, 0x13, 0x29, 0x69, 0x02, 0x1d, 0xcf, 0x54, 0x5f, 0x7a, 0x25, 0xa9, 0x3d, 0x47, 0x9d, 0x1a, 0x14, 0x0d, 0xbc, 0x59, 0x3a, 0x99, 0x15, 0x13, 0x29, 0x69, 0x02, 0x1d, 0xcf, 0x54, 0x5f, 0x7a, 0x25, 0xa9, 0x3d, 0x47, 0x9d, 0x25, 0xe3, 0xf1, 0x04, 0x00, 0x2d, 0xe3, 0xf1, 0x04, 0x00, 0x38, 0x01, 0x45, 0x4f, 0x47, 0x53, 0x4c, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2020, true);
						aBuffer.write<uint32>(0x00000068);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data2, sizeof(data2));
						aBuffer.doItAll(client->clientSocket);

						
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x201c, true);
						aBuffer.write<uint32>(0x00000068);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint32>(0);
						aBuffer.write<uint32>(0x00000017);
						aBuffer.write<uint32>(0x0001e1de);
						aBuffer.doItAll(client->clientSocket);

						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x201c, true);
						aBuffer.write<uint32>(0x00000068);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint32>(0);
						aBuffer.write<uint32>(0x00000008);
						aBuffer.write<uint32>(0xffffffff);
						aBuffer.doItAll(client->clientSocket);

						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x201c, true);
						aBuffer.write<uint32>(0x00000068);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint32>(0);
						aBuffer.write<uint32>(0x00000017);
						aBuffer.write<uint32>(0x0001e1df);
						aBuffer.doItAll(client->clientSocket);

						uint8 data3[] = {
							0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7d, 0x08, 0x93, 0xc8, 0x80, 0x80, 0xe0, 0xca, 0xe4, 0xea, 0x20, 0x12, 0x04, 0x08, 0x00, 0x10, 0x01, 0x12, 0x08, 0x08, 0x08, 0x10, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x12, 0x06, 0x08, 0x17, 0x10, 0xdf, 0xc3, 0x07, 0x12, 0x04, 0x08, 0x2e, 0x10, 0x07, 0x1a, 0x53, 0x0a, 0x14, 0x0d, 0x99, 0xbf, 0x60, 0xdd, 0x15, 0xf6, 0x73, 0x09, 0x76, 0x1d, 0xca, 0xed, 0x49, 0x79, 0x25, 0xd2, 0xc7, 0xed, 0x8d, 0x12, 0x14, 0x0d, 0x99, 0xbf, 0x60, 0xdd, 0x15, 0xf6, 0x73, 0x09, 0x76, 0x1d, 0xca, 0xed, 0x49, 0x79, 0x25, 0xd2, 0xc7, 0xed, 0x8d, 0x1a, 0x14, 0x0d, 0x99, 0xbf, 0x60, 0xdd, 0x15, 0xf6, 0x73, 0x09, 0x76, 0x1d, 0xca, 0xed, 0x49, 0x79, 0x25, 0xd2, 0xc7, 0xed, 0x8d, 0x25, 0x15, 0x4b, 0x33, 0x00, 0x2d, 0x15, 0x4b, 0x33, 0x00, 0x38, 0x01, 0x45, 0x35, 0x50, 0x55, 0x43, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2020, true);
						aBuffer.write<uint32>(0x00000068);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data3, sizeof(data3));
						aBuffer.doItAll(client->clientSocket);

						uint8 data4[] = {
							0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x08, 0x9b, 0xc8, 0x02, 0x18, 0x01, 0x28, 0x08, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x04, 0xf2, 0x4c, 0x00, 0x04, 0xf2, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x30, 0x41, 0x59, 0x4b, 0x95, 0xa3, 0x9b, 0x79, 0xaa, 0xbc, 0xcc, 0x12, 0x4d, 0x3c, 0x16, 0x57, 0xa1, 0x9f, 0xa0, 0x63, 0x95, 0xa3, 0x9b, 0x79, 0xaa, 0xbc, 0xcc, 0x12, 0x4d, 0x3c, 0x16, 0x57, 0xa1, 0x9f, 0xa0, 0x63, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2000, true);
						aBuffer.write<uint32>(0x00000078);
						aBuffer.write<uint32>(0x642cd3d6);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data4, sizeof(data4));
						aBuffer.doItAll(client->clientSocket);

						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x201c, true);
						aBuffer.write<uint32>(0x00000065);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint32>(0x00000010);
						aBuffer.write<uint32>(0x00000017);
						aBuffer.write<uint32>(0x0001e1e1);
						aBuffer.doItAll(client->clientSocket);

						uint8 data5[] = {
							0x00, 0x10, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x08, 0x9b, 0xc8, 0x02, 0x18, 0x02, 0x28, 0x08, 0x30, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0xf1, 0xe3, 0x00, 0x04, 0xf1, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4c, 0x53, 0x47, 0x4f, 0x99, 0x3a, 0x59, 0xbc, 0x02, 0x69, 0x29, 0x13, 0x7a, 0x5f, 0x54, 0xcf, 0x9d, 0x47, 0x3d, 0xa9, 0x99, 0x3a, 0x59, 0xbc, 0x02, 0x69, 0x29, 0x13, 0x7a, 0x5f, 0x54, 0xcf, 0x9d, 0x47, 0x3d, 0xa9, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2000, true);
						aBuffer.write<uint32>(0x00000078);
						aBuffer.write<uint32>(0x642cd3d6);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data5, sizeof(data5));
						aBuffer.doItAll(client->clientSocket);

						uint8 data6[] = {
							0x00, 0x10, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x08, 0x9b, 0xc8, 0x02, 0x18, 0x03, 0x28, 0x08, 0x30, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x12, 0x00, 0x33, 0x4b, 0x15, 0x00, 0x33, 0x4b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x43, 0x55, 0x50, 0x35, 0xdd, 0x60, 0xbf, 0x99, 0x76, 0x09, 0x73, 0xf6, 0x79, 0x49, 0xed, 0xca, 0x8d, 0xed, 0xc7, 0xd2, 0xdd, 0x60, 0xbf, 0x99, 0x76, 0x09, 0x73, 0xf6, 0x79, 0x49, 0xed, 0xca, 0x8d, 0xed, 0xc7, 0xd2, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2000, true);
						aBuffer.write<uint32>(0x00000078);
						aBuffer.write<uint32>(0x642cd3d6);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data6, sizeof(data6));
						aBuffer.doItAll(client->clientSocket);

						uint8 data7[] = {
							0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x08, 0x9b, 0xc8, 0x02, 0x18, 0x02, 0x28, 0x08, 0x30, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0xf1, 0xe3, 0x00, 0x04, 0xf1, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4c, 0x53, 0x47, 0x4f, 0x99, 0x3a, 0x59, 0xbc, 0x02, 0x69, 0x29, 0x13, 0x7a, 0x5f, 0x54, 0xcf, 0x9d, 0x47, 0x3d, 0xa9, 0x99, 0x3a, 0x59, 0xbc, 0x02, 0x69, 0x29, 0x13, 0x7a, 0x5f, 0x54, 0xcf, 0x9d, 0x47, 0x3d, 0xa9, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2000, true);
						aBuffer.write<uint32>(0x00000078);
						aBuffer.write<uint32>(0x642cd3d6);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data7, sizeof(data7));
						aBuffer.doItAll(client->clientSocket);

						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x201c, true);
						aBuffer.write<uint32>(0x00000065);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint32>(0x00000005);
						aBuffer.write<uint32>(0x00000017);
						aBuffer.write<uint32>(0x0001e1e3);
						aBuffer.doItAll(client->clientSocket);

						uint8 data8[] = {
							0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x08, 0x9b, 0xc8, 0x02, 0x18, 0x03, 0x28, 0x08, 0x30, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x12, 0x00, 0x33, 0x4b, 0x15, 0x00, 0x33, 0x4b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x43, 0x55, 0x50, 0x35, 0xdd, 0x60, 0xbf, 0x99, 0x76, 0x09, 0x73, 0xf6, 0x79, 0x49, 0xed, 0xca, 0x8d, 0xed, 0xc7, 0xd2, 0xdd, 0x60, 0xbf, 0x99, 0x76, 0x09, 0x73, 0xf6, 0x79, 0x49, 0xed, 0xca, 0x8d, 0xed, 0xc7, 0xd2, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2000, true);
						aBuffer.write<uint32>(0x00000078);
						aBuffer.write<uint32>(0x642cd3d6);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data8, sizeof(data8));
						aBuffer.doItAll(client->clientSocket);

						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x201c, true);
						aBuffer.write<uint32>(0x00000065);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint32>(0x00000012);
						aBuffer.write<uint32>(0x00000017);
						aBuffer.write<uint32>(0x0001e1e5);
						aBuffer.doItAll(client->clientSocket);

						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2000, true);
						aBuffer.write<uint32>(0x00000015);
						aBuffer.write<uint32>(0xf98e10b3);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint8>(0);
						aBuffer.write<uint32>(0x00000360);
						aBuffer.write<uint32>(0x00000003);
						aBuffer.doItAll(client->clientSocket);

						uint8 data9[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data9, sizeof(data9));
						aBuffer.doItAll(client->clientSocket);

						uint8 data10[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data10, sizeof(data10));
						aBuffer.doItAll(client->clientSocket);

						uint8 data11[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data11, sizeof(data11));
						aBuffer.doItAll(client->clientSocket);

						uint8 data12[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data12, sizeof(data12));
						aBuffer.doItAll(client->clientSocket);

						uint8 data13[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data13, sizeof(data13));
						aBuffer.doItAll(client->clientSocket);

						uint8 data14[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data14, sizeof(data14));
						aBuffer.doItAll(client->clientSocket);

						uint8 data15[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data15, sizeof(data15));
						aBuffer.doItAll(client->clientSocket);

						uint8 data16[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data16, sizeof(data16));
						aBuffer.doItAll(client->clientSocket);

						uint8 data17[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data17, sizeof(data17));
						aBuffer.doItAll(client->clientSocket);

						uint8 data18[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data18, sizeof(data18));
						aBuffer.doItAll(client->clientSocket);

						uint8 data19[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data19, sizeof(data19));
						aBuffer.doItAll(client->clientSocket);

						uint8 data20[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data20, sizeof(data20));
						aBuffer.doItAll(client->clientSocket);

						uint8 data21[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data21, sizeof(data21));
						aBuffer.doItAll(client->clientSocket);

						uint8 data22[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data22, sizeof(data22));
						aBuffer.doItAll(client->clientSocket);

						uint8 data23[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data23, sizeof(data23));
						aBuffer.doItAll(client->clientSocket);

						uint8 data24[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data24, sizeof(data24));
						aBuffer.doItAll(client->clientSocket);

						uint8 data25[] = {
							0x00, 0x00, 0x00, 0x6c, 0x00, 0x0b, 0xbc, 0x46, 0x00, 0x0b, 0xbc, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4b, 0x4d, 0x39, 0x36, 0xc0, 0xeb, 0xa3, 0x41, 0x80, 0x61, 0x06, 0xf3, 0x12, 0xb8, 0x35, 0x3e, 0xb3, 0xc3, 0x96, 0x42, 0xc0, 0xeb, 0xa3, 0x41, 0x80, 0x61, 0x06, 0xf3, 0x12, 0xb8, 0x35, 0x3e, 0xb3, 0xc3, 0x96, 0x42, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2050, true);
						aBuffer.writeArray(data25, sizeof(data25));
						aBuffer.doItAll(client->clientSocket);

						uint8 data26[] = {
							0x00, 0x00, 0x00, 0x6d, 0x00, 0x0b, 0xbc, 0x47, 0x00, 0x0b, 0xbc, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x50, 0x44, 0x42, 0x31, 0x64, 0xa7, 0x64, 0xb9, 0x96, 0xb5, 0xca, 0xb8, 0xe4, 0x76, 0x7c, 0x76, 0xa7, 0x0d, 0xe4, 0xe7, 0x64, 0xa7, 0x64, 0xb9, 0x96, 0xb5, 0xca, 0xb8, 0xe4, 0x76, 0x7c, 0x76, 0xa7, 0x0d, 0xe4, 0xe7, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2050, true);
						aBuffer.writeArray(data26, sizeof(data26));
						aBuffer.doItAll(client->clientSocket);

						uint8 data27[] = {
							0x00, 0x00, 0x00, 0x70, 0x00, 0x0b, 0xbc, 0x4b, 0x00, 0x0b, 0xbc, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x49, 0x31, 0x4b, 0x4b, 0xcd, 0x42, 0x9c, 0xfd, 0x62, 0xf3, 0x3e, 0x51, 0x4d, 0x49, 0x8e, 0x24, 0xb0, 0x4f, 0x6c, 0xcb, 0xcd, 0x42, 0x9c, 0xfd, 0x62, 0xf3, 0x3e, 0x51, 0x4d, 0x49, 0x8e, 0x24, 0xb0, 0x4f, 0x6c, 0xcb, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2050, true);
						aBuffer.writeArray(data27, sizeof(data27));
						aBuffer.doItAll(client->clientSocket);

						uint8 data28[] = {
							0x00, 0x00, 0x04, 0xe2, 0x00, 0x32, 0x9b, 0x83, 0x00, 0x32, 0x9b, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4c, 0x50, 0x4d, 0x58, 0x85, 0x42, 0xef, 0xf0, 0x2c, 0xae, 0x85, 0x4a, 0xc7, 0x0d, 0x86, 0xcb, 0xeb, 0xf0, 0x6e, 0xcb, 0x85, 0x42, 0xef, 0xf0, 0x2c, 0xae, 0x85, 0x4a, 0xc7, 0x0d, 0x86, 0xcb, 0xeb, 0xf0, 0x6e, 0xcb, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2050, true);
						aBuffer.writeArray(data28, sizeof(data28));
						aBuffer.doItAll(client->clientSocket);

						uint8 data29[] = {
							0x00, 0x00, 0x01, 0x03, 0x00, 0x38, 0x15, 0xc0, 0x00, 0x38, 0x15, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4c, 0x35, 0x56, 0x33, 0x64, 0x01, 0x8d, 0x59, 0x5b, 0xb1, 0x00, 0x9d, 0x52, 0x74, 0xc5, 0x57, 0x6d, 0x47, 0x45, 0xd4, 0x64, 0x01, 0x8d, 0x59, 0x5b, 0xb1, 0x00, 0x9d, 0x52, 0x74, 0xc5, 0x57, 0x6d, 0x47, 0x45, 0xd4, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2050, true);
						aBuffer.writeArray(data29, sizeof(data29));
						aBuffer.doItAll(client->clientSocket);

						uint8 data30[] = {
							0x00, 0x00, 0x04, 0xe4, 0x00, 0x39, 0xe7, 0x83, 0x00, 0x39, 0xe7, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x37, 0x30, 0x39, 0x4c, 0x14, 0xbd, 0x51, 0x26, 0x54, 0x6d, 0xd8, 0x6b, 0x7c, 0x60, 0xbd, 0x85, 0x1f, 0x3f, 0x36, 0xc6, 0x14, 0xbd, 0x51, 0x26, 0x54, 0x6d, 0xd8, 0x6b, 0x7c, 0x60, 0xbd, 0x85, 0x1f, 0x3f, 0x36, 0xc6, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2050, true);
						aBuffer.writeArray(data30, sizeof(data30));
						aBuffer.doItAll(client->clientSocket);

						uint8 data31[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data31, sizeof(data31));
						aBuffer.doItAll(client->clientSocket);
						
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x00000012);
						aBuffer.write<uint32>(0xa8bbeb7f);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint16>(0x0001);
						aBuffer.write<uint32>(0x00416544);
						aBuffer.doItAll(client->clientSocket);
						
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x00000012);
						aBuffer.write<uint32>(0xa8bbeb7f);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint16>(0x0001);
						aBuffer.write<uint32>(0x00416541);
						aBuffer.doItAll(client->clientSocket);
						
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x00000012);
						aBuffer.write<uint32>(0xa8bbeb7f);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint16>(0x0001);
						aBuffer.write<uint32>(0x00416542);
						aBuffer.doItAll(client->clientSocket);
						
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x00000012);
						aBuffer.write<uint32>(0xa8bbeb7f);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint16>(0x0001);
						aBuffer.write<uint32>(0x00416548);
						aBuffer.doItAll(client->clientSocket);
						
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x00000012);
						aBuffer.write<uint32>(0xa8bbeb7f);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint16>(0x0001);
						aBuffer.write<uint32>(0x004165f1);
						aBuffer.doItAll(client->clientSocket);
						
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x00000012);
						aBuffer.write<uint32>(0xa8bbeb7f);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint16>(0x0001);
						aBuffer.write<uint32>(0x004165ef);
						aBuffer.doItAll(client->clientSocket);
						
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x00000012);
						aBuffer.write<uint32>(0xa8bbeb7f);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint16>(0x0001);
						aBuffer.write<uint32>(0x00416546);
						aBuffer.doItAll(client->clientSocket);
						
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x00000012);
						aBuffer.write<uint32>(0xa8bbeb7f);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint16>(0x0001);
						aBuffer.write<uint32>(0x00416545);
						aBuffer.doItAll(client->clientSocket);
						
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x00000012);
						aBuffer.write<uint32>(0xa8bbeb7f);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint16>(0x0001);
						aBuffer.write<uint32>(0x004165f0);
						aBuffer.doItAll(client->clientSocket);
						
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x00000012);
						aBuffer.write<uint32>(0xa8bbeb7f);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint16>(0x0001);
						aBuffer.write<uint32>(0x00416547);
						aBuffer.doItAll(client->clientSocket);
						
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x00000012);
						aBuffer.write<uint32>(0xa8bbeb7f);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint16>(0x0001);
						aBuffer.write<uint32>(0x00416543);
						aBuffer.doItAll(client->clientSocket);
						
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x00000012);
						aBuffer.write<uint32>(0xa8bbeb7f);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint16>(0x0001);
						aBuffer.write<uint32>(0x00416549);
						aBuffer.doItAll(client->clientSocket);

						uint8 data32[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data32, sizeof(data32));
						aBuffer.doItAll(client->clientSocket);

						uint8 data33[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe5, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data33, sizeof(data33));
						aBuffer.doItAll(client->clientSocket);

						uint8 data34[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xdb, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data34, sizeof(data34));
						aBuffer.doItAll(client->clientSocket);

						uint8 data35[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xdd, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data35, sizeof(data35));
						aBuffer.doItAll(client->clientSocket);

						uint8 data36[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data36, sizeof(data36));
						aBuffer.doItAll(client->clientSocket);

						uint8 data37[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x04, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data37, sizeof(data37));
						aBuffer.doItAll(client->clientSocket);

						uint8 data38[] = {
							0x00, 0x00, 0x04, 0xe6, 0x00, 0x4b, 0x3e, 0xc8, 0x00, 0x4b, 0x3e, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4c, 0x31, 0x44, 0x53, 0xb3, 0xae, 0xe6, 0xaa, 0x50, 0x9c, 0xcd, 0x1e, 0xb4, 0xe9, 0xf4, 0xb4, 0x7e, 0xcf, 0xe7, 0xd2, 0xb3, 0xae, 0xe6, 0xaa, 0x50, 0x9c, 0xcd, 0x1e, 0xb4, 0xe9, 0xf4, 0xb4, 0x7e, 0xcf, 0xe7, 0xd2, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0xb2, 0x90, 0x80, 0x5c, 0x29, 0xe6, 0x27, 0xca, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2050, true);
						aBuffer.writeArray(data38, sizeof(data38));
						aBuffer.doItAll(client->clientSocket);

						uint8 data39[] = {
							0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0e, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002d);
						aBuffer.write<uint32>(0x6b6fd368);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data39, sizeof(data39));
						aBuffer.doItAll(client->clientSocket);
						
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x00000011);
						aBuffer.write<uint32>(0x40749b8a);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint8>(1);
						aBuffer.write<uint32>(0x0000003d);
						aBuffer.doItAll(client->clientSocket);

						uint8 data40[] = {
							0x00, 0x00, 0x00, 0x07, 0xe2, 0x00, 0x00, 0xcf, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
						};
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000003a);
						aBuffer.write<uint32>(0xf508f4c1);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(data40, sizeof(data40));
						aBuffer.doItAll(client->clientSocket);

						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x201b, true);
						aBuffer.doItAll(client->clientSocket);

						
						aBuffer = PacketBuffer(500);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
						aBuffer.write<uint32>(0x0000002b);
						aBuffer.write<uint32>(0x10d27bc0);
						aBuffer.write<uint32>(0x0000c350);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint8>(0x01);
						aBuffer.write<uint32>(0x62);
						aBuffer.write<uint32>(0x0000c79c);
						aBuffer.write<uint32>(0x00000faa); //map
						aBuffer.write<uint32>(0);
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint32>(0);
						aBuffer.write<uint32>(0);
						aBuffer.write<uint32>(0);
						aBuffer.write<uint8>(0);
						aBuffer.doItAll(client->clientSocket);

						client->charInfo.level = 1;
						client->charInfo.map = 0x00000faa;
						if(!Database.updateCharacter(&client->charInfo))
						{
							Log.Error("Critical error at saving new character %s\n", client->charInfo.name.c_str());
						}

						break;
					}
				case 0xa36d3b74:
					{
						uint32 recObjTyp = packet->data->read<uint32>();
						uint32 recClientInst = packet->data->read<uint32>();
						uint16 unk0 = packet->data->read<uint8>();
						uint32 recDataLength = packet->data->read<uint32>();
						uint32 unk2 = packet->data->read<uint32>();
						uint8 unk3 = packet->data->read<uint8>();
						uint8 runByte = packet->data->read<uint8>();
						uint32 recVal = 0;
						uint8 runId = 0;
						while(runByte != 0x22)
						{
							if(runId == 0)
								recVal = runByte;
							if(runId == 1)
								recVal += (runByte *0x100);
							if(runId == 2)
								recVal += (runByte *0x10000);
							if(runId == 3)
								recVal += (runByte *0x1000000);

							runByte = packet->data->read<uint8>();
							runId++;
						}
						string recCmd = packet->data->readString();
						uint8 strend = packet->data->read<uint8>();
						string recSecCmd = packet->data->readString();
						if(recCmd == "IntroDone")
						{
							uint8 sender1[] = { 0x0d, 0x13, 0xce, 0x71, 0xb1, 0x10, 0x14 };
							uint8 receiver1[] = { 0x0d, 0x47, 0xc1, 0x67, 0x6c, 0x10, 0x84, 0x80, 0x80, 0x08 };
							PacketBuffer aBuffer(500);
							aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2000, true);
							aBuffer.write<uint32>(0x00000019);
							aBuffer.write<uint32>(0x96b8dc59);
							aBuffer.write<uint32>(0x0000c350);
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.write<uint8>(0);
							aBuffer.write<uint32>(0x00000001);
							aBuffer.write<uint32>(0x000000ba);
							aBuffer.write<uint32>(0);
							aBuffer.doItAll(client->clientSocket);
						}
						else if(recCmd =="ChangeSex")
						{
							client->charInfo.sex = recVal;
						}
						else if(recCmd =="ChangeRace")
						{
							client->charInfo.race = recVal;
						}
						else if(recCmd =="ChangeHeadMesh")
						{
							client->charInfo.headmesh = recVal;
						}
						else if(recCmd =="ChangeSize")
						{
							client->charInfo.size = recVal;
						}
						else if(recCmd =="ChangeClass")
						{
							client->charInfo.Class = recVal;
						}
						else if(recCmd =="ChangeVoice")
						{
							client->charInfo.voice = recVal;
						}
						else if(recCmd =="SetMorphValue")
						{
							Log.Notice("Second Command: %s with value 0x%08x\n", recSecCmd.c_str(), recVal);
							if(recSecCmd.size() > 0)
							{
								//vector<string> scriptData = String::splitString(recSecCmd, "_");
								//Log.Debug("Splitted String: %s - %s\n", scriptData[0].c_str(), scriptData[1].c_str());
								client->counter++;
								client->state = 1;

								uint8 sender1[] = { 0x0d, 0x13, 0xce, 0x71, 0xb1, 0x10, 0x14 };
								uint8 receiver1[] = { 0x0d, 0x47, 0xc1, 0x67, 0x6c, 0x10, 0x84, 0x80, 0x80, 0x08 };
								PacketBuffer aBuffer(500);
								aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2000, true);
								uint32 size = recSecCmd.size() + ( 5 * 4) + (1 * 2) + ( 2 * 1);
								aBuffer.write<uint32>(size);
								aBuffer.write<uint32>(0xbadf5a4b);
								aBuffer.write<uint32>(0x0000c350);
								aBuffer.write<uint32>(client->nClientInst);
								aBuffer.write<uint8>(0);
								aBuffer.write<string>(recSecCmd);
								aBuffer.write<uint32>(0x3f800000);
								aBuffer.write<uint8>(0);
								aBuffer.write<uint32>(client->counter + 1);
								//Log.Warning("Send packet:\n%s\n\n", String::arrayToHexString(aBuffer.buffer, aBuffer.bufferLength).c_str());
								aBuffer.doItAll(client->clientSocket);

							}
							else
							{
								client->counter = 0;
							}
						}
						else if(recCmd == "TheNameIs")
						{
							Log.Debug("Attempt to create Char with the name: %s\n", recSecCmd.c_str());
							client->charInfo.name = recSecCmd;

							if(!Database.isValidCharName(client->charInfo.name))
							{
								//TODO add missing return packet
								Log.Warning("Charname is incorrect !\n\n");
								closesocket(client->clientSocket);
								break;
							}
							uint8 sender1[] = { 0x0d, 0x13, 0xce, 0x71, 0xb1, 0x10, 0x14 };
							uint8 receiver1[] = { 0x0d, 0x47, 0xc1, 0x67, 0x6c, 0x10, 0x84, 0x80, 0x80, 0x08 };
							PacketBuffer aBuffer(500);
							aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2000, true);
							uint32 size = client->charInfo.name.size() + ( 5 * 4) + (1 * 2) + ( 1 * 1);
							aBuffer.write<uint32>(size);
							aBuffer.write<uint32>(0xadce0cda);
							aBuffer.write<uint32>(0x0000c350);
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.write<uint32>(0);
							aBuffer.write<uint32>(0x03010000);
							aBuffer.write<uint8>(0);
							aBuffer.write<string>(client->charInfo.name);
							Log.Warning("Send packet:\n%s\n\n", String::arrayToHexString(aBuffer.buffer, aBuffer.bufferLength).c_str());
							aBuffer.doItAll(client->clientSocket);

							uint8 data[] = {
								0x00, 0x00, 0x00, 0x00, 0x1f, 0x08, 0x05, 0x10, 0x02, 0x18, 0x00, 0x22
							};
							aBuffer = PacketBuffer(500);
							aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2000, true);
							size = client->charInfo.name.size() + (10 + 1) +sizeof(data) + ( 4 * 4) + (1 * 2) + ( 2 * 1);
							aBuffer.write<uint32>(size);
							aBuffer.write<uint32>(0xa36d3b74);
							aBuffer.write<uint32>(0x0000c350);
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(data, sizeof(data));
							aBuffer.writeString("NicknameOk");
							aBuffer.write<uint8>(0x2a);
							aBuffer.writeString(client->charInfo.name);
							aBuffer.write<uint32>(0x32040800);
							aBuffer.write<uint16>(0x1000);
							Log.Warning("Send packet:\n%s\n\n", String::arrayToHexString(aBuffer.buffer, aBuffer.bufferLength).c_str());
							aBuffer.doItAll(client->clientSocket);

							uint8 data2[] = {
								0x00, 0x00, 0x00, 0x07, 0xe2, 0x00, 0x00, 0xcf, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x46, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							aBuffer = PacketBuffer(500);
							aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2000, true);
							size = sizeof(data2) + ( 3 * 4);
							aBuffer.write<uint32>(size);
							aBuffer.write<uint32>(0xf508f4c1);
							aBuffer.write<uint32>(0x0000c350);
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(data2, sizeof(data2));
							Log.Warning("Send packet:\n%s\n\n", String::arrayToHexString(aBuffer.buffer, aBuffer.bufferLength).c_str());
							aBuffer.doItAll(client->clientSocket);

							uint8 data3[] = {
								0x00, 0x00, 0x00, 0x00, 0x24, 0x08, 0x05, 0x10, 0x02, 0x18, 0x00, 0x22, 0x14, 
								0x43, 0x68, 0x61, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 
								0x2a, 0x00, 0x32, 0x04, 0x08, 0x00, 0x10, 0x00
							};
							aBuffer = PacketBuffer(500);
							aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2000, true);
							size = sizeof(data3) + ( 3 * 4);
							aBuffer.write<uint32>(size);
							aBuffer.write<uint32>(0xa36d3b74);
							aBuffer.write<uint32>(0x0000c350);
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(data3, sizeof(data3));
							Log.Warning("Send packet:\n%s\n\n", String::arrayToHexString(aBuffer.buffer, aBuffer.bufferLength).c_str());
							aBuffer.doItAll(client->clientSocket);

							uint8 data4[] = {
								0x00, 0x00, 0xc3, 0x50, 0x00, 0x00, 0x27, 0xf6, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0a, 0x08, 0xc5, 0xc3, 0x02, 0x18, 0x01, 0x28, 0x18, 0x30, 0x00
							};
							aBuffer = PacketBuffer(500);
							aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2000, true);
							size = sizeof(data4) + ( 1 * 4);
							aBuffer.write<uint32>(size);
							aBuffer.write<uint32>(0x642cd3d6);
							aBuffer.writeArray(data4, sizeof(data4));
							Log.Warning("Send packet:\n%s\n\n", String::arrayToHexString(aBuffer.buffer, aBuffer.bufferLength).c_str());
							aBuffer.doItAll(client->clientSocket);

							uint8 data5[] = {
								0x00, 0x00, 0xc3, 0x50, 0x00, 0x00, 0x27, 0xf7, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0a, 0x08, 0xc5, 0xc3, 0x02, 0x18, 0x01, 0x28, 0x18, 0x30, 0x00
							};
							aBuffer = PacketBuffer(500);
							aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2000, true);
							size = sizeof(data5) + ( 1 * 4);
							aBuffer.write<uint32>(size);
							aBuffer.write<uint32>(0x642cd3d6);
							aBuffer.writeArray(data5, sizeof(data5));
							Log.Warning("Send packet:\n%s\n\n", String::arrayToHexString(aBuffer.buffer, aBuffer.bufferLength).c_str());
							aBuffer.doItAll(client->clientSocket);

							uint8 data6[] = {
								0x01, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x14
							};
							aBuffer = PacketBuffer(500);
							aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2000, true);
							size = sizeof(data6) + ( 3 * 4);
							aBuffer.write<uint32>(size);
							aBuffer.write<uint32>(0xf98e10b3);
							aBuffer.write<uint32>(0x0000c350);
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(data6, sizeof(data6));
							Log.Warning("Send packet:\n%s\n\n", String::arrayToHexString(aBuffer.buffer, aBuffer.bufferLength).c_str());
							aBuffer.doItAll(client->clientSocket);

						}
						else
						{
							Log.Error("Receive unknown command: %s with value 0x%08x\n", recCmd.c_str(), recVal);
						}
						break;
					}
				case 0x4517aa81:
					{
						uint32 dataobjdec = packet->data->read<uint32>();
						uint32 dataclientinst = packet->data->read<uint32>();
						uint16 movingType = packet->data->read<uint16>();
						switch(movingType)
						{
						case 0x011a: 
						case 0x011e:
						case 0x001e:
						case 0x001a:
							{
								uint32 charCoordX = packet->data->read<uint32>();
								uint32 charCoordY = packet->data->read<uint32>();
								uint32 charCoordZ = packet->data->read<uint32>();
								uint8* datadat = packet->data->readArray(pbLength-((6*4)+(1*2)));

								uint8 sender1[] = { 0x0d, 0x13, 0xce, 0x71, 0xb1, 0x10, 0x0b };
								uint8 receiver1[] = { 0x0d, 0x47, 0xc1, 0x67, 0x6c, 0x10, 0xe6, 0x8f, 0x80, 0x08 };
	
								PacketBuffer aBuffer(5000);
								aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2000, true);
								aBuffer.write<uint32>(pbLength);
								aBuffer.write<uint32>(pbOpcode);
								aBuffer.write<uint32>(dataobjdec);
								aBuffer.write<uint32>(dataclientinst);
								aBuffer.write<uint16>(movingType);
								aBuffer.write<uint32>(charCoordX);
								aBuffer.write<uint32>(charCoordY);
								aBuffer.write<uint32>(charCoordZ);
								aBuffer.writeArray(datadat, (pbLength-((6*4)+(1*2))));
								Log.Warning("Send Packet:\n%s\n\n", String::arrayToHexString(aBuffer.buffer, aBuffer.bufferLength).c_str());
								aBuffer.doItAll(client->clientSocket);
								break;
							}
						default:
							{
								Log.Warning("Receive unknown movement Packet with opcode 0x%08x and moving type: 0x%04x:\n%s\n\n", packet->opcode, movingType, String::arrayToHexString(packet->packetBuffer->buffer, packet->packetBuffer->bufferLength).c_str());
								break;
							}
						}
						break;
					}
				case 0x864cfef8: //peer0_160
					{
						Log.Warning("Ready for playScreen\n");
						uint8 sender1[] = { 0x0d, 0x5d, 0xb9, 0xec, 0xa9, 0x10, 0x0b };
						uint8 receiver1[] = { 0x0d, 0x91, 0xf7, 0x87, 0x8b, 0x10, 0xe6, 0x8f, 0x80, 0x08 };
						uint8 blobData1[] = {
							0x43, 0xa7, 0x40, 0x00, 
							0x43, 0x14, 0x66, 0x66, 
							0x44, 0x25, 0x4c, 0xcd, 
							
							0x00, 0x00, 0x07, 0xe2, //2018 = 2*1009 -> -1 -> 1xCoord
							0x43, 0xa7, 0x40, 0x00, 
							0x43, 0x14, 0x66, 0x66, 
							0x44, 0x25, 0x4c, 0xcd, 

							0x00, 0x00, 0xc7, 0x9e, 
							0x00, 0x00, 0x0f, 0xaa, 
							0x00, 0x00, 0x00, 0x00, 
							0x00, 0x00, 0x00, 0x00, 
							0x00, 0x00, 0x00, 0x00, 
							0x00, 0x00, 0x00, 0x64, 
							0x00
						};
	
						PacketBuffer aBuffer(5000);
						aBuffer.writeHeader(sender1, sizeof(sender1), receiver1, sizeof(receiver1), 0x2024, true);
						aBuffer.writeArray(blobData1, sizeof(blobData1));
						aBuffer.doItAll(client->clientSocket);
						
						uint8 sender2[] = { 0x0d, 0x13, 0xce, 0x71, 0xb1, 0x10, 0x0b };
						uint8 receiver2[] = { 0x0d, 0x47, 0xc1, 0x67, 0x6c, 0x10, 0xe6, 0x8f, 0x80, 0x08 };
						uint8 blobData2[] = { 
							0x00, 0x00, 0x00, 0x0e, 0x06, 0xec, 0x12, 0x55, 0x00, 0x00, 0xc3, 0x50
						};
						uint8 blobData2_1[] = { 
							0x00, 0x09
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true); 
						aBuffer.writeArray(blobData2, sizeof(blobData2));
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.writeArray(blobData2_1, sizeof(blobData2_1));
						aBuffer.doItAll(client->clientSocket);
						
						uint8 blobData3[] = { 
							0x00, 0x00, 0x00, 0x0d, 0x86, 0x4c, 0xfe, 0xf8, 0x00, 0x00, 0xc3, 0x50
						};
						aBuffer = PacketBuffer(5000);
						aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true); 
						aBuffer.writeArray(blobData3, sizeof(blobData3));
						aBuffer.write<uint32>(client->nClientInst);
						aBuffer.write<uint8>(0);
						aBuffer.doItAll(client->clientSocket);
						
						if(client->charInfo.level == 0)
						{
							uint8 blobData7[] = { 
								0x00, 0x00, 0x00, 0x89, 0xf5, 0x08, 0xf4, 0xc1, 0x00, 0x00, 0xc3, 0x50
							};
							uint8 blobData7_1[] = { 
								0x00, 0x00, 0x00, 0x07, 0xe2, 0x00, 0x00, 0xd0, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x39, 0xbf, 0x93, 
								//0x00, 0x4d, 
								//0x4d, 0x61, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x3d, 0x35, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x31, 0x30, 0x32, 0x33, 0x32, 0x3b, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x3d, 0x35, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x31, 0x30, 0x32, 0x33, 0x33, 0x3b, 0x53, 0x74, 0x79, 0x67, 0x69, 0x61, 0x6e, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x72, 0x3d, 0x35, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x31, 0x30, 0x32, 0x33, 0x34, 
								//0x00, 0x00, 0x00, 0x00, 0x00
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true); 
							aBuffer.writeArray(blobData7, sizeof(blobData7));
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(blobData7_1, sizeof(blobData7_1));
							aBuffer.write<string>("MaleTemplate=50000:10232;FemaleTemplate=50000:10233;StygianSlaver=50000:10234");
							aBuffer.write<uint8>(0);
							aBuffer.write<uint32>(0);
							aBuffer.doItAll(client->clientSocket);
						
							uint8 blobData8[] = { 
								0x00, 0x00, 0x00, 0x89, 0xf5, 0x08, 0xf4, 0xc1, 0x00, 0x00, 0xc3, 0x50
							};
							uint8 blobData8_1[] = { 
								0x00, 0x00, 0x00, 0x07, 0xe2, 0x00, 0x00, 0xd0, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x01, 0x9d, 0xd1, 0x00, 0x4d, 0x4d, 0x61, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x3d, 0x35, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x31, 0x30, 0x32, 0x33, 0x32, 0x3b, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x3d, 0x35, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x31, 0x30, 0x32, 0x33, 0x33, 0x3b, 0x53, 0x74, 0x79, 0x67, 0x69, 0x61, 0x6e, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x72, 0x3d, 0x35, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x31, 0x30, 0x32, 0x33, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true); 
							aBuffer.writeArray(blobData8, sizeof(blobData8));
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(blobData8_1, sizeof(blobData8_1));
							aBuffer.doItAll(client->clientSocket);
							//*/
						
							uint8 blobData4[] = { 
								0x00, 0x00, 0x00, 0x15, 0xf9, 0x8e, 0x10, 0xb3, 0x00, 0x00, 0xc3, 0x50
							};
							uint8 blobData4_1[] = { 
								0x00, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x00, 0x02
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true); 
							aBuffer.writeArray(blobData4, sizeof(blobData4));
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(blobData4_1, sizeof(blobData4_1));
							aBuffer.doItAll(client->clientSocket);
						
							uint8 blobData5[] = { 
								0x00, 0x00, 0x00, 0x4c, 0x6b, 0x87, 0xe3, 0x16, 0x00, 0x00, 0xc3, 0x50
							};
							uint8 blobData5_1[] = { 
								0x00, 0x00, 0x00, 0x0b, 0x90, 0x00, 0x00, 0x00, 0xc3, 0x50
							};
							uint8 blobData5_2[] = { 
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
								0x00, 0x00, 0x27, 0x10, 
								0x00, 0x01, 
								0x00, 0x00, 0x00, 0x01, 
								0x00, 0x00, 0x00, 0x00, 
								0x00, 0x00, 0x0b, 0x90, 
								0x00, 0x00, 0x00, 0x01, 
								0x00, 0x00, 0x00, 0x00, 
								0x00, 0x00, 0x00, 0x00, 
								0x00, 0x00, 0x00, 0x01, 
								0x00, 0x00, 0x00, 0x00, 
								0x02, 0x3c, 0x4b, 0xa3
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true); 
							aBuffer.writeArray(blobData5, sizeof(blobData5));
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(blobData5_1, sizeof(blobData5_1));
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(blobData5_2, sizeof(blobData5_2));
							aBuffer.doItAll(client->clientSocket);
						
							uint8 blobData6[] = { 
								0x00, 0x00, 0x00, 0x11, 0x40, 0x74, 0x9b, 0x8a, 0x00, 0x00, 0xc3, 0x50
							};
							uint8 blobData6_1[] = { 
								0x01, 0x00, 0x00, 0x00, 0x00
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true);
							aBuffer.writeArray(blobData6, sizeof(blobData6));
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(blobData6_1, sizeof(blobData6_1));
							aBuffer.doItAll(client->clientSocket);

						
							uint8 blobData9[] = { 
								0x00, 0x00, 0x03, 0x06, 0xa3, 0x6d, 0x3b, 0x74, 0x00, 0x00, 0xc3, 0x50
							};
							uint8 blobData9_1[] = { 
								0x00, 0x00, 0x00, 0x02, 0xf5, 0x08, 0x05, 0x10, 0x07, 0x18, 0x00, 0x22, 0xb9, 0x01, 0x3c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3d, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x6f, 0x72, 0x73, 0x6b, 0x69, 0x70, 0x28, 0x37, 0x32, 0x29, 0x7c, 0x6f, 0x6e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x28, 0x31, 0x29, 0x7c, 0x4e, 0x45, 0x57, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x20, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x79, 0x20, 0x28, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x73, 0x69, 0x64, 0x65, 0x29, 0x22, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3d, 0x22, 0x35, 0x30, 0x30, 0x32, 0x33, 0x22, 0x20, 0x6b, 0x65, 0x79, 0x3d, 0x22, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x42, 0x5d, 0x53, 0x5a, 0x2e, 0x41, 0x47, 0x52, 0x47, 0x72, 0x41, 0x79, 0x4f, 0x47, 0x65, 0x2a, 0x42, 0x47, 0x2d, 0x22, 0x20, 0x6b, 0x6e, 0x75, 0x62, 0x6f, 0x74, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x20, 0x3e, 0x3c, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3e, 0x2a, 0xa6, 0x04, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x3a, 0x37, 0x39, 0x33, 0x37, 0x31, 0x33, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x3a, 0x37, 0x39, 0x33, 0x37, 0x31, 0x34, 0x3b, 0x31, 0x30, 0x37, 0x30, 0x30, 0x30, 0x33, 0x3a, 0x34, 0x30, 0x30, 0x30, 0x3b, 0x31, 0x30, 0x30, 0x30, 0x30, 0x39, 0x37, 0x3a, 0x34, 0x30, 0x30, 0x30, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x33, 0x30, 0x3a, 0x31, 0x35, 0x36, 0x32, 0x31, 0x31, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x33, 0x30, 0x3a, 0x32, 0x33, 0x39, 0x34, 0x34, 0x38, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x33, 0x30, 0x3a, 0x35, 0x36, 0x35, 0x39, 0x31, 0x33, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x3a, 0x33, 0x37, 0x32, 0x38, 0x35, 0x33, 0x33, 0x3b, 0x31, 0x30, 0x36, 0x30, 0x36, 0x36, 0x38, 0x3a, 0x34, 0x30, 0x30, 0x30, 0x3b, 0x31, 0x30, 0x30, 0x30, 0x30, 0x35, 0x39, 0x3a, 0x34, 0x30, 0x30, 0x30, 0x3b, 0x31, 0x30, 0x36, 0x30, 0x36, 0x36, 0x37, 0x3a, 0x31, 0x36, 0x37, 0x33, 0x36, 0x38, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x3a, 0x33, 0x30, 0x37, 0x35, 0x34, 0x34, 0x35, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x3a, 0x33, 0x31, 0x38, 0x30, 0x30, 0x32, 0x35, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x3a, 0x32, 0x32, 0x31, 0x32, 0x38, 0x35, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x3a, 0x33, 0x36, 0x36, 0x33, 0x31, 0x39, 0x30, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x3a, 0x32, 0x30, 0x38, 0x39, 0x32, 0x33, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x3a, 0x32, 0x30, 0x38, 0x32, 0x36, 0x36, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x3a, 0x32, 0x32, 0x36, 0x38, 0x39, 0x31, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x3a, 0x33, 0x36, 0x36, 0x33, 0x31, 0x39, 0x31, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x3a, 0x33, 0x36, 0x35, 0x36, 0x31, 0x30, 0x39, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x33, 0x30, 0x3a, 0x32, 0x31, 0x30, 0x30, 0x36, 0x39, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x3a, 0x32, 0x31, 0x30, 0x30, 0x37, 0x30, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x3a, 0x33, 0x30, 0x37, 0x35, 0x34, 0x35, 0x32, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x3a, 0x33, 0x30, 0x37, 0x35, 0x34, 0x35, 0x30, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x3a, 0x33, 0x30, 0x37, 0x35, 0x34, 0x35, 0x31, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x33, 0x30, 0x30, 0x3a, 0x34, 0x30, 0x30, 0x30, 0x3b, 0x31, 0x30, 0x30, 0x30, 0x30, 0x34, 0x39, 0x3a, 0x34, 0x30, 0x30, 0x30, 0x3b, 0x31, 0x30, 0x36, 0x36, 0x36, 0x31, 0x31, 0x3a, 0x34, 0x30, 0x30, 0x30, 0x3b, 0x31, 0x30, 0x30, 0x30, 0x30, 0x31, 0x33, 0x3a, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3b, 0x31, 0x30, 0x30, 0x30, 0x30, 0x31, 0x35, 0x3a, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x35, 0x30, 0x36, 0x3a, 0x34, 0x30, 0x30, 0x30, 0x3b, 0x31, 0x30, 0x30, 0x30, 0x30, 0x35, 0x38, 0x3a, 0x34, 0x30, 0x30, 0x30, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x32, 0x30, 0x37, 0x3a, 0x31, 0x31, 0x30, 0x30, 0x30, 0x36, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x32, 0x30, 0x37, 0x3a, 0x32, 0x36, 0x32, 0x32, 0x34, 0x31, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x32, 0x30, 0x37, 0x3a, 0x35, 0x36, 0x38, 0x38, 0x30, 0x36, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x32, 0x30, 0x37, 0x3a, 0x33, 0x34, 0x32, 0x30, 0x33, 0x33, 0x31, 0x3b, 0x31, 0x30, 0x31, 0x30, 0x32, 0x30, 0x37, 0x3a, 0x31, 0x36, 0x37, 0x31, 0x38, 0x33, 0x32, 0x08, 0x08, 0x95, 0xb1, 0x27, 0x10, 0x99, 0xf7, 0x31
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true); 
							aBuffer.writeArray(blobData9, sizeof(blobData9));
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(blobData9_1, sizeof(blobData9_1));
							aBuffer.doItAll(client->clientSocket);

						
							uint8 blobData10[] = { 
								0x00, 0x00, 0x00, 0x2b, 0xa3, 0x6d, 0x3b, 0x74, 0x00, 0x00, 0xc3, 0x50
							};
							uint8 blobData10_1[] = { 
								0x00, 0x00, 0x00, 0x00, 0x1a, 0x08, 0x05, 0x10, 0x02, 0x18, 0x00, 0x22, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x53, 0x6b, 0x69, 0x70, 0x2a, 0x00, 0x32, 0x04, 0x08, 0x00, 0x10, 0x00
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true); 
							aBuffer.writeArray(blobData10, sizeof(blobData10));
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.writeArray(blobData10_1, sizeof(blobData10_1));
							aBuffer.doItAll(client->clientSocket);

						
							uint8 blobData11[] = { 
								0x00, 0x00, 0x00, 0x28, 0xba, 0xdf, 0x5a, 0x4b, 
								0x00, 0x00, 0xc3, 0x50, 0x00, 0x00, 0x27, 0xf8, 
								0x00, 0x00, 0x10, 0x2a, 0x68, 0x61, 0x69, 0x72, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x32, 0x30, 0x37, 0x39, 0x32, 0x30, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true); 
							aBuffer.writeArray(blobData11, sizeof(blobData11));
							aBuffer.doItAll(client->clientSocket);

						
							uint8 blobData12[] = { 
								0x00, 0x00, 0x00, 0x28, 0xba, 0xdf, 0x5a, 0x4b, 0x00, 0x00, 0xc3, 0x50, 0x00, 0x00, 0x27, 0xf9, 0x00, 0x00, 0x10, 0x2a, 0x68, 0x61, 0x69, 0x72, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x32, 0x30, 0x33, 0x36, 0x36, 0x36, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true); 
							aBuffer.writeArray(blobData12, sizeof(blobData12));
							aBuffer.doItAll(client->clientSocket);

						
							uint8 blobData13[] = { 
								0x00, 0x00, 0x00, 0x20, 0x64, 0x2c, 0xd3, 0xd6, 
								0x00, 0x00, 0xc3, 0x50, 0x00, 0x00, 0x27, 0xf8, 
								0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0a, 0x08, 0xd3, 0x9e, 0x05, 0x18, 0x02, 0x28, 0x18, 0x30, 0x00
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true); 
							aBuffer.writeArray(blobData13, sizeof(blobData13));
							aBuffer.doItAll(client->clientSocket);

						
							uint8 blobData14[] = { 
								0x00, 0x00, 0x00, 0x29, 0xba, 0xdf, 0x5a, 0x4b, 0x00, 0x00, 0xc3, 0x50
							};
							uint8 blobData14_1[] = { 
								//0x00, 
								//0x00, 0x11, 
								//0x2a, 0x74, 0x65, 0x78, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x31, 0x38, 0x33, 0x38, 0x37, 0x35, 
								0x3f, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true); 
							aBuffer.writeArray(blobData14, sizeof(blobData14));
							aBuffer.write<uint32>(client->nClientInst);
							aBuffer.write<uint8>(0);
							aBuffer.write<string>("*texscript_183875");
							aBuffer.writeArray(blobData14_1, sizeof(blobData14_1));
							aBuffer.doItAll(client->clientSocket);

						
							uint8 blobData15[] = { 
								0x00, 0x00, 0x00, 0x29, 0xba, 0xdf, 0x5a, 0x4b, 0x00, 0x00, 0xc3, 0x50, 0x00, 0x00, 0x27, 0xf9, 0x00, 0x00, 
								0x11, 0x2a, 0x74, 0x65, 0x78, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x31, 0x38, 0x33, 0x38, 0x37, 0x35, 0x3f, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true); 
							aBuffer.writeArray(blobData15, sizeof(blobData15));
							aBuffer.doItAll(client->clientSocket);

						
							uint8 blobData16[] = { 
								0x00, 0x00, 0x00, 0x29, 0xba, 0xdf, 0x5a, 0x4b, 0x00, 0x00, 0xc3, 0x50, 0x00, 0x00, 0x27, 0xf8, 0x00, 0x00, 
								0x11, 0x2a, 0x74, 0x65, 0x78, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x31, 0x38, 0x33, 0x38, 0x37, 0x35, 0x3f, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02
							};
							aBuffer = PacketBuffer(5000);
							aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true); 
							aBuffer.writeArray(blobData16, sizeof(blobData16));
							aBuffer.doItAll(client->clientSocket);
						}
						//*/
						break;
					}
				case 0x642CD3D6:
					{
						uint32 cInstPreId = packet->data->read<uint32>();
						uint32 clientInst = packet->data->read<uint32>();
						uint16 unk0 = packet->data->read<uint16>();
						uint32 unk1 = packet->data->read<uint32>();
						uint32 unklength0 = packet->data->read<uint32>();
						uint8* unkdata = packet->data->readArray(unklength0);
						uint32 objPreId = packet->data->read<uint32>();
						uint32 objId = packet->data->read<uint32>();
						uint32 unk2 = packet->data->read<uint32>();

						if(objId == 0x00004cc9 && unk2 == 6)
						{
							GTable->client->charInfo.map = 500;

							teleportChar("GM Island", GTable, clientList);
						}
						break;
					}
				default:
					{
						Log.Error("Unknown PassBlob-Opcode: 0x%08x\n", pbOpcode);
						break;
					}
				}
			}
			break;
		}
	case 0x2001:
		{
			Log.Debug("Receive ServerStat Request\n");
			uint32 sId1 = packet->data->read<uint32>();
			uint32 sId2 = packet->data->read<uint32>();
			uint8 sender[] = { 0x0d, 0x13, 0xce, 0x71, 0xb1, 0x10, 0x0b };
			uint8 receiver[] = { 0x0d, 0x47, 0xc1, 0x67, 0x6c, 0x10, 0xe6, 0x8f, 0x80, 0x08 };


			PacketBuffer aBuffer(500);
			aBuffer.writeHeader(sender, sizeof(sender), receiver, sizeof(receiver), 0x2005, true); 
			aBuffer.write<uint32>(sId1);
			aBuffer.write<uint32>(sId2);
			aBuffer.write<uint32>(0x0000013d);
			aBuffer.write<uint32>(0xd08fd8f9);
			//Log.Warning("Send Packet:\n%s\n\n", String::arrayToHexString(aBuffer.buffer, aBuffer.bufferLength).c_str());
			aBuffer.doItAll(client->clientSocket);
			Log.Debug("Send ServerStat Request\n");
			break;
		}
	case 0x2003:
		{
			client->nClientInst = packet->data->read<uint32>();
			uint32 unk0 = packet->data->read<uint32>();
			uint32 charId = client->nClientInst & 0x00ffffff;
			string clientVersion = packet->data->read<string>();
			client->charInfo.characterID = charId;
			Database.getCharacterInfo(charId, &client->charInfo);

			GTable->client = client;

			Log.Debug("CharID: 0x%08x - 0x%08x\n", charId, client->nClientInst);
			Log.Debug("Recieve Client-Version: %s\n", clientVersion.c_str());
			if(clientVersion != "v4.00.NoTS@369764")
			{
				Log.Error("Incompatible client connects to the Server\n");
				//break;
			}

			loadWorldHandler(GTable);
			
			break;
		}

	case 0x2002:
		{
			uint32 unk0 = packet->data->read<uint32>();
			uint32 unk1 = packet->data->read<uint32>();
			uint32 unk2 = packet->data->read<uint32>();
			uint32 unk3 = packet->data->read<uint32>();
			string chatLine = packet->data->read<string>();
			Log.Debug("Receive Chat Line: %s\n", chatLine.c_str());
			HandleCommand(GTable, chatLine, clientList);
			break;
		}

	case 0x201F:
		{
			Log.Warning("Receive spawncheck packet\n");
			uint32 part1 = packet->data->read<uint32>();
			uint32 spawnId = packet->data->read<uint32>();

			uint8 sender[] = { 0x0d, 0x5d, 0xb9, 0xec, 0xa9, 0x10, 0x18 };
			uint8 receiver[] = { 0x0d, 0x91, 0xf7, 0x87, 0x8b, 0x10, 0xe6, 0x8f, 0x80, 0x08 };
	
			PacketBuffer aBuffer(500);
			aBuffer.writeHeader(sender, sizeof(sender), receiver, sizeof(receiver), 0x2008, true); 
			aBuffer.write<uint32>(part1);
			aBuffer.write<uint32>(spawnId);
			aBuffer.write<uint8>(0);
			aBuffer.doItAll(client->clientSocket);
			Log.Warning("Sent spawncheck packet\n");
			break;
		}
	case 0x2005:
		{
			Log.Debug("PING\n");
			uint8 sender[] = { 0x0d, 0x13, 0xce, 0x71, 0xb1, 0x10, 0x14 };
			uint8 receiver[] = { 0x0d, 0x47, 0xc1, 0x67, 0x6c, 0x10, 0x84, 0x80, 0x80, 0x08 };

			PacketBuffer aBuffer(500);
			aBuffer.writeHeader(sender, sizeof(sender), receiver, sizeof(receiver), 0x2009, true); 
			aBuffer.write<uint32>(0x42c80000);
			aBuffer.write<uint32>(0);
			aBuffer.write<uint32>(0);
			aBuffer.doItAll(client->clientSocket);
			Log.Debug("PONG\n");
			break;
		}
		/*
	case 0x206a: //request change map
		{

			uint8 sender[] = { 0x0d, 0x13, 0xce, 0x71, 0xb1, 0x10, 0x14 };
			uint8 receiver[] = { 0x0d, 0x47, 0xc1, 0x67, 0x6c, 0x10, 0x84, 0x80, 0x80, 0x08 };

			PacketBuffer aBuffer(500);
			aBuffer.writeHeader(sender, sizeof(sender), receiver, sizeof(receiver), 0x2009, true); 
			aBuffer.write<uint32>(0x00000067);
			aBuffer.write<uint32>(0x5a32f0d7);
			aBuffer.write<uint32>(0x0000c350);
			aBuffer.write<uint32>(client->nClientInst);
			aBuffer.write<uint8>(0);
			aBuffer.write<uint64>(0);
			aBuffer.write<uint64>(0);
			aBuffer.write<uint64>(0);
			aBuffer.write<uint32>(0x3f800000);
			aBuffer.write<uint8>(0x62);
			aBuffer.write<uint32>(0x0000c79c);
			aBuffer.write<uint32>(0x00000faa); //map
			aBuffer.write<uint32>(client->nClientInst);
			aBuffer.write<uint32>(0x0000000a);
			aBuffer.write<uint32>(0x00009c50);
			aBuffer.write<uint32>(0x00030bde); //instance
			aBuffer.write<uint64>(0);
			aBuffer.write<uint32>(0x00000014);
			aBuffer.write<uint32>(0x00018704);
			aBuffer.write<uint32>(0x43a14000);
			aBuffer.write<uint32>(0x43160000);
			aBuffer.write<uint32>(0x4430399a);
			aBuffer.write<uint32>(0x00000032);
			aBuffer.write<uint8>(0);
			//Log.Warning("Send Packet:\n%s\n\n", String::arrayToHexString(aBuffer.buffer, aBuffer.bufferLength).c_str());
			aBuffer.doItAll(client->clientSocket);

			uint32 i_nDimID = (client->nClientInst >> 24) & 0x000000ff;
			RealmInfo* realm = 0;
			for(uint32 i = 0; i < Settings.realms.size(); i++)
			{
				if(Settings.realms[i]->realmID == i_nDimID)
				{
					realm = Settings.realms[i];
					break; // break forloop
			 	}
			}
			aBuffer = PacketBuffer(500);
			aBuffer.writeHeader(sender, sizeof(sender), receiver, sizeof(receiver), 0x2002, true); 
			aBuffer.write<uint32>(htonl(inet_addr(realm->worldServerIPAddress.c_str())));
			aBuffer.write<uint16>(realm->worldServerPort);
			aBuffer.doItAll(client->clientSocket);
			break;
		}
		//*/
	case 0x207b:
		{
			//Maybe hide items
			Log.Warning("Receive opcode 0x207b. Maybe hide object(helmet,...)\n");
			break;
		}
	case 0x2082:
		{
			Log.Debug("Receive GC-PING\n");
			uint8 unk0 = packet->data->read<uint32>();
			uint32 sId = packet->data->read<uint32>();
			uint8 sender[] = { 0x0d, 0x5d, 0xb9, 0xec, 0xa9, 0x10, 0x0b };
			uint8 receiver[] = { 0x0d, 0x91, 0xf7, 0x87, 0x8b, 0x10, 0xe6, 0x8f, 0x80, 0x08 };
			
			time_t nServerTime;
			time(&nServerTime);

			PacketBuffer aBuffer(500);
			aBuffer.writeHeader(sender, sizeof(sender), receiver, sizeof(receiver), 0x207c, true); 
			aBuffer.write<uint32>(sId);
			aBuffer.write<uint32>(0x00000013);
			aBuffer.write<uint32>(nServerTime);
			//Log.Warning("Send Packet:\n%s\n\n", String::arrayToHexString(aBuffer.buffer, aBuffer.bufferLength).c_str());
			aBuffer.doItAll(client->clientSocket);
			Log.Debug("Send GC-PONG\n");
			
			if(client->state == 1 && client->counter > 0)
			{
				client->state = 0;
				client->counter = 0;
				uint8 sender2[] = { 0x0d, 0x13, 0xce, 0x71, 0xb1, 0x10, 0x14 };
				uint8 receiver2[] = { 0x0d, 0x47, 0xc1, 0x67, 0x6c, 0x10, 0x84, 0x80, 0x80, 0x08 };
				uint8 data1[] = {
					0x00, 0x00, 0x00, 0x00, 0x0e, 0x08, 0x05, 0x10, 0x00, 0x18, 0xec, 0x97, 0x02, 0x32, 0x04, 0x08, 0x00, 0x10, 0x00
				};
				aBuffer = PacketBuffer(500);
				aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true); 
				aBuffer.write<uint32>(0x0000001f);
				aBuffer.write<uint32>(0xa36d3b74);
				aBuffer.write<uint32>(0x0000c350);
				aBuffer.write<uint32>(client->nClientInst);
				aBuffer.writeArray(data1, sizeof(data1));
				aBuffer.doItAll(client->clientSocket);

				uint8 data2[] = {
					0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2a, 0xf8, 0x00, 0x00, 0x01, 0xf9, 0x00, 0x00, 0x43, 0x30, 0x00, 0x00, 0x01, 0xfb, 0x00, 0x00, 0x00, 0x00
				};
				aBuffer = PacketBuffer(500);
				aBuffer.writeHeader(sender2, sizeof(sender2), receiver2, sizeof(receiver2), 0x2000, true); 
				aBuffer.write<uint32>(0x00000029);
				aBuffer.write<uint32>(0x96b8dc59);
				aBuffer.write<uint32>(0x0000c350);
				aBuffer.write<uint32>(client->nClientInst);
				aBuffer.writeArray(data2, sizeof(data2));
				aBuffer.doItAll(client->clientSocket);
			}
			break;
		}
	default:
		{
			Log.Warning("Receive unknown Packetwith opcode 0x%08x:\n%s\n\n", packet->opcode, String::arrayToHexString(packet->packetBuffer->buffer, packet->packetBuffer->bufferLength).c_str());
			//Log.Warning("Unknown Packet With Opcode: 0x%08X (%s to %s):\n", packet->opcode, packet->receiver.c_str(), packet->sender.c_str());
			//Log.Warning("%s\n\n", String::arrayToHexString(packet->data->buffer, packet->data->bufferLength).c_str());

			break;
		}

	}
	
}