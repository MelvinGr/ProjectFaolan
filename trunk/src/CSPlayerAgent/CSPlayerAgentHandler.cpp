/*
Project Faolan a Simple and Free Server Emulator for Age of Conan.
Copyright (C) 2009, 2010 The Project Faolan Team

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

#include "CSPlayerAgent.h"

void CSPlayerAgent::CSPlayerAgentHandler(Packet* packet, GameClient* client)
{
	switch(packet->opcode)
	{
	case 0x00: // Authenticate
		{
			client->nClientInst = packet->data->read<uint32>(); // ID64::InstanceType
			client->charInfo.accountID= packet->data->read<uint32>();
			client->charInfo.characterID = client->nClientInst & 0x00ffffff;

			PacketBuffer aBuffer(500);
			aBuffer.writeHeader("CSPlayerAgent", "CSlayerInterface", 1, 0, client->nClientInst, 0, 0x00);
			aBuffer.write<uint32>(0x01);
			aBuffer.doItAll(client->clientSocket);

			break;
		}

	case 0x05: // invite to group
		{
			string username = packet->data->read<string>();
			uint32 unk0 = packet->data->read<uint32>();

			Log.Notice("request group for: %s\n\n", username.c_str());

			break;
		}

	case 0x1B: // GetExtendedCharacterInfo ??
		{
			uint32 unk1 = packet->data->read<uint32>();// 0x0000c350
			uint32 nClientInst = packet->data->read<uint32>();

			//

			break;
		}

	case 0x2B:
		{
			// no Data!

			break;
		}

	case 0x69:
		{
			uint8 pack1[] = 
			{
				0x4b, 0x30, 0xe9, 0x68, 0x00, 0x00, 0x23, 0x79, 
				0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 
				0x00, 0x00, 0x2b, 0x20, 0x00, 0x00, 0x1c, 0x20, 0x00, 0x00, 
				0x03, 0x84, 0x00, 0x00, 0x07, 0x47, 0x00, 0x00, 
				0x04, 0xeb, 0x4b, 0x32, 0x84, 0xd0, 0x00, 0x01, 
				0x39, 0x7a, 0x00, 0x18, 0x44, 0x72, 0x61, 0x63, 
				0x6f, 0x6e, 0x65, 0x73, 0x20, 0x4e, 0x69, 0x67, 
				0x72, 0x69, 0x20, 0x2d, 0x20, 0x50, 0x68, 0x6f, 
				0x65, 0x6e, 0x69, 0x78, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
				0x00, 0x00, 0x02, 0x00, 0x00, 0x2b, 0x20, 0x00, 
				0x00, 0x1c, 0x20, 0x00, 0x00, 0x03, 0x84, 0x00, 
				0x00, 0x02, 0x5d, 0x00, 0x00, 0x04, 0x3d, 0x4b, 
				0x33, 0xc8, 0x40, 0x00, 0x01, 0x38, 0xa7, 0x00, 
				0x07, 0x45, 0x78, 0x61, 0x6c, 0x74, 0x65, 0x64, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 
				0x00, 0x2b, 0x20, 0x00, 0x00, 0x1c, 0x20, 0x00, 
				0x00, 0x03, 0x84, 0x00, 0x00, 0x01, 0xef, 0x00, 
				0x00, 0x06, 0xd4, 0x4b, 0x32, 0x5a, 0xa0, 0x00, 
				0x01, 0x3b, 0xd0, 0x00, 0x0a, 0x54, 0x68, 0x65, 
				0x20, 0x45, 0x6d, 0x70, 0x69, 0x72, 0x65, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 
				0x2f, 0x26, 0x00, 0x00, 0x1c, 0x20, 0x00, 0x00, 
				0x03, 0x84, 0x00, 0x00, 0x01, 0x5a, 0x00, 0x00, 
				0x04, 0x8b, 0x4b, 0x31, 0x17, 0x30, 0x00, 0x01, 
				0x3a, 0x1f, 0x00, 0x17, 0x42, 0x61, 0x6e, 0x64, 
				0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 
				0x47, 0x72, 0x61, 0x79, 0x20, 0x43, 0x6c, 0x6f, 
				0x76, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 
				0x00, 0x05, 0x00, 0x00, 0x2f, 0x26, 0x00, 0x00, 
				0x1c, 0x20, 0x00, 0x00, 0x03, 0x84, 0x00, 0x00, 
				0x06, 0x06, 0x00, 0x00, 0x03, 0xfc, 0x4b, 0x32, 
				0x76, 0xc0, 0x00, 0x01, 0x38, 0x83, 0x00, 0x0d, 
				0x4e, 0x6f, 0x76, 0x61, 0x20, 0x4b, 0x72, 0x65, 
				0x70, 0x75, 0x73, 0x6b, 0x6f, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
				0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x2f, 0x26, 
				0x00, 0x00, 0x1c, 0x20, 0x00, 0x00, 0x03, 0x84, 
				0x00, 0x00, 0x02, 0x6f, 0x00, 0x00, 0x01, 0x67, 
				0x4b, 0x31, 0xce, 0x00, 0x00, 0x01, 0x38, 0xa4, 
				0x00, 0x1e, 0x43, 0x61, 0x76, 0x61, 0x6c, 0x69, 
				0x65, 0x72, 0x69, 0x20, 0x64, 0x65, 0x6c, 0x20, 
				0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x6f, 0x20, 
				0x2d, 0x50, 0x68, 0x6f, 0x65, 0x6e, 0x69, 0x78, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 
				0x00, 0x32, 0xfa, 0x00, 0x00, 0x1c, 0x20, 0x00, 
				0x00, 0x03, 0x84, 0x00, 0x00, 0x01, 0x0d, 0x00, 
				0x00, 0x05, 0x1e, 0x4b, 0x30, 0xed, 0x00, 0x00, 
				0x01, 0x38, 0x99, 0x00, 0x10, 0x54, 0x61, 0x73, 
				0x79, 0x66, 0x61, 0x20, 0x2d, 0x20, 0x50, 0x68, 
				0x6f, 0x65, 0x6e, 0x69, 0x78, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
				0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x32, 0xfa, 
				0x00, 0x00, 0x1c, 0x20, 0x00, 0x00, 0x03, 0x84, 
				0x00, 0x00, 0x04, 0x6a, 0x00, 0x00, 0x01, 0x74, 
				0x4b, 0x31, 0x41, 0x60, 0x00, 0x01, 0x38, 0xcb, 
				0x00, 0x0e, 0x53, 0x61, 0x6e, 0x67, 0x75, 0x69, 
				0x73, 0x20, 0x41, 0x74, 0x74, 0x65, 0x78, 0x6f, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00 
			};

			PacketBuffer aBuffer(5000);
			aBuffer.writeHeader("CSPlayerAgent", "CSlayerInterface", 1, 0, client->nClientInst, 0, 0x8e);
			aBuffer.writeArray(pack1, sizeof(pack1));
			aBuffer.doItAll(client->clientSocket);

			break;
		}

	default:
		{
			Log.Warning("Unknown Packet With Opcode: 0x%08X\n", packet->opcode);
			Log.Warning("%s\n\n", String::arrayToHexString(packet->data->buffer, packet->data->bufferLength).c_str());

			break;
		}
	}
}